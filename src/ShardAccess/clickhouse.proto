syntax="proto3";
option java_package="com.datapps.linkoopdb.clickhouse.noderpc";
option java_outer_classname = "NodeProtos";
option java_multiple_files = true;
package clickhouse;



message BoolResult {
    bool ok = 1;
    string errinfo = 2;
}


message ShardArg {
    string table_name = 1;
    string shard_id = 2;
}

message SqlCommonInfo {
	ShardArg shard_arg = 1;
    repeated string shard_ids = 2;
	repeated string table_shard_name = 3;
	repeated string sql = 4;
}

// DDL
message CreateShardArg {
	SqlCommonInfo sqls = 1;
}

message DropShardArg {
    SqlCommonInfo sqls = 1;
    bool ignore_nonexist_shard = 2; // 是否忽略不存在的shard
}

message TruncateShardArg {
    SqlCommonInfo sqls = 1;
}

message DropTableArg {
    SqlCommonInfo sqls = 1;
}
message ChangeTableNameArg {
	SqlCommonInfo sqls = 1;

    string table_name = 2;
    string new_table_name = 3;
}
message ChangeColNameArg {
	SqlCommonInfo sqls = 1;
	string old_col_name = 2;
	string new_col_name = 3;
}
message ChangeColTypeArg {
    SqlCommonInfo sqls = 1;	
}
message AddColArg {
    SqlCommonInfo sqls = 1;
	string col_name = 2;
}
message DropColArg {
    SqlCommonInfo sqls = 1;
	string col_name = 2;
}
message ChangeIdxNameArg {
    SqlCommonInfo sqls = 1;	
	string old_idx_name = 2;
	string new_idx_name = 3;
}
message AddIdxArg {
    SqlCommonInfo sqls = 1;
	string idx_name = 2;
}
message DropIdxArg {
    SqlCommonInfo sqls = 1;
	string idx_name = 2;
}


// DML
message ShardDeleteArg {
    SqlCommonInfo sqls = 1;
	string txn_id = 2;
	int32 success_node_cnt = 3;  // 0表示等待所有副本处理完成，1表示本副本处理完成即可，>1表示具体需完成的副本数
}

message ShardDeleteResult {
    BoolResult result = 1;
	repeated string shard_ids = 2;
    repeated int64 deleted_row_cnt = 3;
}

message ShardUpdateArg {
    SqlCommonInfo sqls = 1;
	string txn_id = 2;
	int32 success_node_cnt = 3;  // 0表示等待所有副本处理完成，1表示本副本处理完成即可，>1表示具体需完成的副本数
}

message ShardUpdateResult {
    BoolResult result = 1;
	repeated string shard_ids = 2;
    repeated int64 update_row_cnt = 3;
}



//insert
message ShardInsertArg {
	ShardArg shard_arg = 1;
	string sql = 2;     // insert into table_name(...) values
	string txn_id = 3;
    int32 row_cnt = 4;
	bytes arrow_record_batch = 5;  //通过arrow::RecordBatchReader读取
	int32 success_node_cnt = 6;    // 0表示不等待其他副本，本副本处理完成即可  >0表示具体需完成的副本数
	bool is_compress = 7;  //arrow_record_batch数据是否已经压缩
}






// DQL
message ColValues {
    int32 type = 1; // arrow中的type id
    int32 type_mod = 2; // 类型修饰符，比如decimal类型有precision/scale
    bytes null_bmp = 3;
    repeated bytes data_list = 4;
}

message LocatedShard {
	string storageNodeId = 1;
	string host = 2;
	int32 grpcPort = 3;
	string user = 4;
	string password = 5;
	int32 shard_index = 6;
	int32 replica_index = 7;
	string default_database = 8;
	string rack = 9;   //机架（集群节点分组用）
	string zone =  10;   //机房（集群节点分组用）	
}

message Shard {
	string table_name = 1;
	int64 shard_id = 2;
	repeated LocatedShard locs = 3;
	string shard_table_name = 4;
}

// 从指定shard查询
message ShardReadArg {
    ShardArg shard_arg = 1;
    string snapshot_id = 2;
    string sql = 3;
	int32 batch_rows = 4;     //一批读取的数据量
	bool need_compress = 5;   //返回数据是否需要压缩
}
message ShardReadResult {
	BoolResult result = 1;
    int64 row_cnt = 2;
    bytes arrow_record_batch = 3;  //通过arrow::RecordBatchReader读取
}

// 通过ck的分布式表查询
message ReadShardsArg {
    ShardReadArg read_arg = 1;
	repeated Shard shards = 2;
	string cluster_name = 3;
}


message GetSnapshotArg {
    string snapshot_id = 1;
}
message ReleaseSnapshotArg {
    string snapshot_id = 1;
}


// 事务
message BeginArg {
    string txn_id = 1;
    bool set_snapshot = 2;
    bool disable_wal = 3;
}
message CommitArg {
    string txn_id = 1;
}
message RollbackArg {
    string txn_id = 1;
}






// 信息查询接口
// query table shard ids
message TableShardsArg {
	string table_name = 1;
}

message TableShardsResult {
	BoolResult result = 1;
	string table_name = 2;
	repeated string shard_ids = 3;
}





service Worker {    
    rpc CreateShard(CreateShardArg) returns (BoolResult) {}
    rpc DropShard(DropShardArg) returns (BoolResult) {}
    rpc TruncateShard(TruncateShardArg) returns (BoolResult) {}
    
    rpc DropTable(DropTableArg) returns (BoolResult) {}
    rpc ChangeTableName(ChangeTableNameArg) returns (BoolResult) {}
    rpc ChangeColName(ChangeColNameArg) returns (BoolResult) {}
    rpc ChangeColType(ChangeColTypeArg) returns (BoolResult) {}
    rpc AddCol(AddColArg) returns (BoolResult) {}
    rpc DropCol(DropColArg) returns (BoolResult) {}
    rpc ChangeIdxName(ChangeIdxNameArg) returns (BoolResult) {}
    rpc AddIdx(AddIdxArg) returns (BoolResult) {}
    rpc DropIdx(DropIdxArg) returns (BoolResult) {}
    
    rpc GetSnapshot(GetSnapshotArg) returns (BoolResult) {}
    rpc ReleaseSnapshot(ReleaseSnapshotArg) returns (BoolResult) {}
	rpc ReadShards(ReadShardsArg) returns (stream ShardReadResult) {}
    rpc ShardRead(ShardReadArg) returns (stream ShardReadResult) {}
    
    rpc Begin(BeginArg) returns (BoolResult) {}
    rpc Commit(CommitArg) returns (BoolResult) {}
    rpc Rollback(RollbackArg) returns (BoolResult) {}
    rpc ShardInsert(ShardInsertArg) returns (BoolResult) {}
    rpc ShardDelete(ShardDeleteArg) returns (ShardDeleteResult) {}
    rpc ShardUpdate(ShardUpdateArg) returns (ShardUpdateResult) {}
    
	rpc TableShards(TableShardsArg) returns (TableShardsResult) {}
}








