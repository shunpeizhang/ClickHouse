// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clickhouse.proto

#include "clickhouse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace clickhouse {
class BoolResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BoolResult>
      _instance;
} _BoolResult_default_instance_;
class ShardArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShardArg>
      _instance;
} _ShardArg_default_instance_;
class SqlCommonInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SqlCommonInfo>
      _instance;
} _SqlCommonInfo_default_instance_;
class CreateShardArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateShardArg>
      _instance;
} _CreateShardArg_default_instance_;
class DropShardArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DropShardArg>
      _instance;
} _DropShardArg_default_instance_;
class TruncateShardArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TruncateShardArg>
      _instance;
} _TruncateShardArg_default_instance_;
class DropTableArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DropTableArg>
      _instance;
} _DropTableArg_default_instance_;
class ChangeTableNameArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeTableNameArg>
      _instance;
} _ChangeTableNameArg_default_instance_;
class ChangeColNameArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeColNameArg>
      _instance;
} _ChangeColNameArg_default_instance_;
class ChangeColTypeArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeColTypeArg>
      _instance;
} _ChangeColTypeArg_default_instance_;
class AddColArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddColArg>
      _instance;
} _AddColArg_default_instance_;
class DropColArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DropColArg>
      _instance;
} _DropColArg_default_instance_;
class ChangeIdxNameArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeIdxNameArg>
      _instance;
} _ChangeIdxNameArg_default_instance_;
class AddIdxArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddIdxArg>
      _instance;
} _AddIdxArg_default_instance_;
class DropIdxArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DropIdxArg>
      _instance;
} _DropIdxArg_default_instance_;
class ShardDeleteArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShardDeleteArg>
      _instance;
} _ShardDeleteArg_default_instance_;
class ShardDeleteResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShardDeleteResult>
      _instance;
} _ShardDeleteResult_default_instance_;
class ShardUpdateArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShardUpdateArg>
      _instance;
} _ShardUpdateArg_default_instance_;
class ShardUpdateResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShardUpdateResult>
      _instance;
} _ShardUpdateResult_default_instance_;
class ShardInsertArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShardInsertArg>
      _instance;
} _ShardInsertArg_default_instance_;
class ColValuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ColValues>
      _instance;
} _ColValues_default_instance_;
class LocatedShardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocatedShard>
      _instance;
} _LocatedShard_default_instance_;
class ShardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Shard>
      _instance;
} _Shard_default_instance_;
class ShardReadShardArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShardReadShardArg>
      _instance;
} _ShardReadShardArg_default_instance_;
class ShardReadResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShardReadResult>
      _instance;
} _ShardReadResult_default_instance_;
class ShardReadArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShardReadArg>
      _instance;
} _ShardReadArg_default_instance_;
class GetSnapshotArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSnapshotArg>
      _instance;
} _GetSnapshotArg_default_instance_;
class ReleaseSnapshotArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReleaseSnapshotArg>
      _instance;
} _ReleaseSnapshotArg_default_instance_;
class BeginArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeginArg>
      _instance;
} _BeginArg_default_instance_;
class CommitArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommitArg>
      _instance;
} _CommitArg_default_instance_;
class RollbackArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RollbackArg>
      _instance;
} _RollbackArg_default_instance_;
class TableShardsArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableShardsArg>
      _instance;
} _TableShardsArg_default_instance_;
class TableShardsResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableShardsResult>
      _instance;
} _TableShardsResult_default_instance_;
}  // namespace clickhouse
namespace protobuf_clickhouse_2eproto {
void InitDefaultsBoolResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::clickhouse::_BoolResult_default_instance_;
    new (ptr) ::clickhouse::BoolResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::BoolResult::InitAsDefaultInstance();
}

void InitDefaultsBoolResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBoolResultImpl);
}

void InitDefaultsShardArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::clickhouse::_ShardArg_default_instance_;
    new (ptr) ::clickhouse::ShardArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::ShardArg::InitAsDefaultInstance();
}

void InitDefaultsShardArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsShardArgImpl);
}

void InitDefaultsSqlCommonInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsShardArg();
  {
    void* ptr = &::clickhouse::_SqlCommonInfo_default_instance_;
    new (ptr) ::clickhouse::SqlCommonInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::SqlCommonInfo::InitAsDefaultInstance();
}

void InitDefaultsSqlCommonInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSqlCommonInfoImpl);
}

void InitDefaultsCreateShardArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  {
    void* ptr = &::clickhouse::_CreateShardArg_default_instance_;
    new (ptr) ::clickhouse::CreateShardArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::CreateShardArg::InitAsDefaultInstance();
}

void InitDefaultsCreateShardArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreateShardArgImpl);
}

void InitDefaultsDropShardArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  {
    void* ptr = &::clickhouse::_DropShardArg_default_instance_;
    new (ptr) ::clickhouse::DropShardArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::DropShardArg::InitAsDefaultInstance();
}

void InitDefaultsDropShardArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDropShardArgImpl);
}

void InitDefaultsTruncateShardArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  {
    void* ptr = &::clickhouse::_TruncateShardArg_default_instance_;
    new (ptr) ::clickhouse::TruncateShardArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::TruncateShardArg::InitAsDefaultInstance();
}

void InitDefaultsTruncateShardArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTruncateShardArgImpl);
}

void InitDefaultsDropTableArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  {
    void* ptr = &::clickhouse::_DropTableArg_default_instance_;
    new (ptr) ::clickhouse::DropTableArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::DropTableArg::InitAsDefaultInstance();
}

void InitDefaultsDropTableArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDropTableArgImpl);
}

void InitDefaultsChangeTableNameArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  {
    void* ptr = &::clickhouse::_ChangeTableNameArg_default_instance_;
    new (ptr) ::clickhouse::ChangeTableNameArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::ChangeTableNameArg::InitAsDefaultInstance();
}

void InitDefaultsChangeTableNameArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChangeTableNameArgImpl);
}

void InitDefaultsChangeColNameArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  {
    void* ptr = &::clickhouse::_ChangeColNameArg_default_instance_;
    new (ptr) ::clickhouse::ChangeColNameArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::ChangeColNameArg::InitAsDefaultInstance();
}

void InitDefaultsChangeColNameArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChangeColNameArgImpl);
}

void InitDefaultsChangeColTypeArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  {
    void* ptr = &::clickhouse::_ChangeColTypeArg_default_instance_;
    new (ptr) ::clickhouse::ChangeColTypeArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::ChangeColTypeArg::InitAsDefaultInstance();
}

void InitDefaultsChangeColTypeArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChangeColTypeArgImpl);
}

void InitDefaultsAddColArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  {
    void* ptr = &::clickhouse::_AddColArg_default_instance_;
    new (ptr) ::clickhouse::AddColArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::AddColArg::InitAsDefaultInstance();
}

void InitDefaultsAddColArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddColArgImpl);
}

void InitDefaultsDropColArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  {
    void* ptr = &::clickhouse::_DropColArg_default_instance_;
    new (ptr) ::clickhouse::DropColArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::DropColArg::InitAsDefaultInstance();
}

void InitDefaultsDropColArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDropColArgImpl);
}

void InitDefaultsChangeIdxNameArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  {
    void* ptr = &::clickhouse::_ChangeIdxNameArg_default_instance_;
    new (ptr) ::clickhouse::ChangeIdxNameArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::ChangeIdxNameArg::InitAsDefaultInstance();
}

void InitDefaultsChangeIdxNameArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChangeIdxNameArgImpl);
}

void InitDefaultsAddIdxArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  {
    void* ptr = &::clickhouse::_AddIdxArg_default_instance_;
    new (ptr) ::clickhouse::AddIdxArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::AddIdxArg::InitAsDefaultInstance();
}

void InitDefaultsAddIdxArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddIdxArgImpl);
}

void InitDefaultsDropIdxArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  {
    void* ptr = &::clickhouse::_DropIdxArg_default_instance_;
    new (ptr) ::clickhouse::DropIdxArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::DropIdxArg::InitAsDefaultInstance();
}

void InitDefaultsDropIdxArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDropIdxArgImpl);
}

void InitDefaultsShardDeleteArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  {
    void* ptr = &::clickhouse::_ShardDeleteArg_default_instance_;
    new (ptr) ::clickhouse::ShardDeleteArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::ShardDeleteArg::InitAsDefaultInstance();
}

void InitDefaultsShardDeleteArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsShardDeleteArgImpl);
}

void InitDefaultsShardDeleteResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsBoolResult();
  {
    void* ptr = &::clickhouse::_ShardDeleteResult_default_instance_;
    new (ptr) ::clickhouse::ShardDeleteResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::ShardDeleteResult::InitAsDefaultInstance();
}

void InitDefaultsShardDeleteResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsShardDeleteResultImpl);
}

void InitDefaultsShardUpdateArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  {
    void* ptr = &::clickhouse::_ShardUpdateArg_default_instance_;
    new (ptr) ::clickhouse::ShardUpdateArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::ShardUpdateArg::InitAsDefaultInstance();
}

void InitDefaultsShardUpdateArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsShardUpdateArgImpl);
}

void InitDefaultsShardUpdateResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsBoolResult();
  {
    void* ptr = &::clickhouse::_ShardUpdateResult_default_instance_;
    new (ptr) ::clickhouse::ShardUpdateResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::ShardUpdateResult::InitAsDefaultInstance();
}

void InitDefaultsShardUpdateResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsShardUpdateResultImpl);
}

void InitDefaultsShardInsertArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  protobuf_clickhouse_2eproto::InitDefaultsColValues();
  {
    void* ptr = &::clickhouse::_ShardInsertArg_default_instance_;
    new (ptr) ::clickhouse::ShardInsertArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::ShardInsertArg::InitAsDefaultInstance();
}

void InitDefaultsShardInsertArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsShardInsertArgImpl);
}

void InitDefaultsColValuesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::clickhouse::_ColValues_default_instance_;
    new (ptr) ::clickhouse::ColValues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::ColValues::InitAsDefaultInstance();
}

void InitDefaultsColValues() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsColValuesImpl);
}

void InitDefaultsLocatedShardImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::clickhouse::_LocatedShard_default_instance_;
    new (ptr) ::clickhouse::LocatedShard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::LocatedShard::InitAsDefaultInstance();
}

void InitDefaultsLocatedShard() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLocatedShardImpl);
}

void InitDefaultsShardImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsLocatedShard();
  {
    void* ptr = &::clickhouse::_Shard_default_instance_;
    new (ptr) ::clickhouse::Shard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::Shard::InitAsDefaultInstance();
}

void InitDefaultsShard() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsShardImpl);
}

void InitDefaultsShardReadShardArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsShardArg();
  {
    void* ptr = &::clickhouse::_ShardReadShardArg_default_instance_;
    new (ptr) ::clickhouse::ShardReadShardArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::ShardReadShardArg::InitAsDefaultInstance();
}

void InitDefaultsShardReadShardArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsShardReadShardArgImpl);
}

void InitDefaultsShardReadResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsColValues();
  {
    void* ptr = &::clickhouse::_ShardReadResult_default_instance_;
    new (ptr) ::clickhouse::ShardReadResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::ShardReadResult::InitAsDefaultInstance();
}

void InitDefaultsShardReadResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsShardReadResultImpl);
}

void InitDefaultsShardReadArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsShardReadShardArg();
  protobuf_clickhouse_2eproto::InitDefaultsShard();
  {
    void* ptr = &::clickhouse::_ShardReadArg_default_instance_;
    new (ptr) ::clickhouse::ShardReadArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::ShardReadArg::InitAsDefaultInstance();
}

void InitDefaultsShardReadArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsShardReadArgImpl);
}

void InitDefaultsGetSnapshotArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::clickhouse::_GetSnapshotArg_default_instance_;
    new (ptr) ::clickhouse::GetSnapshotArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::GetSnapshotArg::InitAsDefaultInstance();
}

void InitDefaultsGetSnapshotArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetSnapshotArgImpl);
}

void InitDefaultsReleaseSnapshotArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::clickhouse::_ReleaseSnapshotArg_default_instance_;
    new (ptr) ::clickhouse::ReleaseSnapshotArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::ReleaseSnapshotArg::InitAsDefaultInstance();
}

void InitDefaultsReleaseSnapshotArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReleaseSnapshotArgImpl);
}

void InitDefaultsBeginArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::clickhouse::_BeginArg_default_instance_;
    new (ptr) ::clickhouse::BeginArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::BeginArg::InitAsDefaultInstance();
}

void InitDefaultsBeginArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBeginArgImpl);
}

void InitDefaultsCommitArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::clickhouse::_CommitArg_default_instance_;
    new (ptr) ::clickhouse::CommitArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::CommitArg::InitAsDefaultInstance();
}

void InitDefaultsCommitArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCommitArgImpl);
}

void InitDefaultsRollbackArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::clickhouse::_RollbackArg_default_instance_;
    new (ptr) ::clickhouse::RollbackArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::RollbackArg::InitAsDefaultInstance();
}

void InitDefaultsRollbackArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRollbackArgImpl);
}

void InitDefaultsTableShardsArgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::clickhouse::_TableShardsArg_default_instance_;
    new (ptr) ::clickhouse::TableShardsArg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::TableShardsArg::InitAsDefaultInstance();
}

void InitDefaultsTableShardsArg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableShardsArgImpl);
}

void InitDefaultsTableShardsResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_clickhouse_2eproto::InitDefaultsBoolResult();
  {
    void* ptr = &::clickhouse::_TableShardsResult_default_instance_;
    new (ptr) ::clickhouse::TableShardsResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clickhouse::TableShardsResult::InitAsDefaultInstance();
}

void InitDefaultsTableShardsResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableShardsResultImpl);
}

::google::protobuf::Metadata file_level_metadata[33];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::BoolResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::BoolResult, ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::BoolResult, errinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardArg, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardArg, shard_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::SqlCommonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::SqlCommonInfo, shard_arg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::SqlCommonInfo, shard_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::SqlCommonInfo, sql_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::CreateShardArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::CreateShardArg, sqls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::DropShardArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::DropShardArg, sqls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::DropShardArg, ignore_nonexist_shard_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::TruncateShardArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::TruncateShardArg, sqls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::DropTableArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::DropTableArg, sqls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ChangeTableNameArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ChangeTableNameArg, sqls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ChangeTableNameArg, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ChangeTableNameArg, new_table_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ChangeColNameArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ChangeColNameArg, sqls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ChangeColTypeArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ChangeColTypeArg, sqls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::AddColArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::AddColArg, sqls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::DropColArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::DropColArg, sqls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ChangeIdxNameArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ChangeIdxNameArg, sqls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::AddIdxArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::AddIdxArg, sqls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::DropIdxArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::DropIdxArg, sqls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardDeleteArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardDeleteArg, sqls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardDeleteArg, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardDeleteArg, success_node_cnt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardDeleteResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardDeleteResult, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardDeleteResult, shard_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardDeleteResult, deleted_row_cnt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardUpdateArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardUpdateArg, sqls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardUpdateArg, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardUpdateArg, success_node_cnt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardUpdateResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardUpdateResult, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardUpdateResult, shard_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardUpdateResult, deleted_row_cnt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardInsertArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardInsertArg, sqls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardInsertArg, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardInsertArg, row_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardInsertArg, col_values_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardInsertArg, success_node_cnt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ColValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ColValues, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ColValues, type_mod_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ColValues, null_bmp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ColValues, data_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::LocatedShard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::LocatedShard, storagenodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::LocatedShard, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::LocatedShard, grpcport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::LocatedShard, rack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::LocatedShard, zone_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::Shard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::Shard, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::Shard, shard_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::Shard, locs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardReadShardArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardReadShardArg, shard_arg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardReadShardArg, snapshot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardReadShardArg, sql_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardReadResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardReadResult, row_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardReadResult, col_values_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardReadArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardReadArg, read_arg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ShardReadArg, shards_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::GetSnapshotArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::GetSnapshotArg, snapshot_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ReleaseSnapshotArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::ReleaseSnapshotArg, snapshot_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::BeginArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::BeginArg, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::BeginArg, set_snapshot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::BeginArg, disable_wal_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::CommitArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::CommitArg, txn_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::RollbackArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::RollbackArg, txn_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::TableShardsArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::TableShardsArg, table_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::TableShardsResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::TableShardsResult, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::TableShardsResult, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::clickhouse::TableShardsResult, shard_ids_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clickhouse::BoolResult)},
  { 7, -1, sizeof(::clickhouse::ShardArg)},
  { 14, -1, sizeof(::clickhouse::SqlCommonInfo)},
  { 22, -1, sizeof(::clickhouse::CreateShardArg)},
  { 28, -1, sizeof(::clickhouse::DropShardArg)},
  { 35, -1, sizeof(::clickhouse::TruncateShardArg)},
  { 41, -1, sizeof(::clickhouse::DropTableArg)},
  { 47, -1, sizeof(::clickhouse::ChangeTableNameArg)},
  { 55, -1, sizeof(::clickhouse::ChangeColNameArg)},
  { 61, -1, sizeof(::clickhouse::ChangeColTypeArg)},
  { 67, -1, sizeof(::clickhouse::AddColArg)},
  { 73, -1, sizeof(::clickhouse::DropColArg)},
  { 79, -1, sizeof(::clickhouse::ChangeIdxNameArg)},
  { 85, -1, sizeof(::clickhouse::AddIdxArg)},
  { 91, -1, sizeof(::clickhouse::DropIdxArg)},
  { 97, -1, sizeof(::clickhouse::ShardDeleteArg)},
  { 105, -1, sizeof(::clickhouse::ShardDeleteResult)},
  { 113, -1, sizeof(::clickhouse::ShardUpdateArg)},
  { 121, -1, sizeof(::clickhouse::ShardUpdateResult)},
  { 129, -1, sizeof(::clickhouse::ShardInsertArg)},
  { 139, -1, sizeof(::clickhouse::ColValues)},
  { 148, -1, sizeof(::clickhouse::LocatedShard)},
  { 158, -1, sizeof(::clickhouse::Shard)},
  { 166, -1, sizeof(::clickhouse::ShardReadShardArg)},
  { 174, -1, sizeof(::clickhouse::ShardReadResult)},
  { 181, -1, sizeof(::clickhouse::ShardReadArg)},
  { 188, -1, sizeof(::clickhouse::GetSnapshotArg)},
  { 194, -1, sizeof(::clickhouse::ReleaseSnapshotArg)},
  { 200, -1, sizeof(::clickhouse::BeginArg)},
  { 208, -1, sizeof(::clickhouse::CommitArg)},
  { 214, -1, sizeof(::clickhouse::RollbackArg)},
  { 220, -1, sizeof(::clickhouse::TableShardsArg)},
  { 226, -1, sizeof(::clickhouse::TableShardsResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_BoolResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_ShardArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_SqlCommonInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_CreateShardArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_DropShardArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_TruncateShardArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_DropTableArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_ChangeTableNameArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_ChangeColNameArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_ChangeColTypeArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_AddColArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_DropColArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_ChangeIdxNameArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_AddIdxArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_DropIdxArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_ShardDeleteArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_ShardDeleteResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_ShardUpdateArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_ShardUpdateResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_ShardInsertArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_ColValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_LocatedShard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_Shard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_ShardReadShardArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_ShardReadResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_ShardReadArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_GetSnapshotArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_ReleaseSnapshotArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_BeginArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_CommitArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_RollbackArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_TableShardsArg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::clickhouse::_TableShardsResult_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "clickhouse.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 33);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020clickhouse.proto\022\nclickhouse\")\n\nBoolRe"
      "sult\022\n\n\002ok\030\001 \001(\010\022\017\n\007errinfo\030\002 \001(\t\"0\n\010Sha"
      "rdArg\022\022\n\ntable_name\030\001 \001(\t\022\020\n\010shard_id\030\002 "
      "\001(\t\"X\n\rSqlCommonInfo\022\'\n\tshard_arg\030\001 \001(\0132"
      "\024.clickhouse.ShardArg\022\021\n\tshard_ids\030\002 \003(\t"
      "\022\013\n\003sql\030\003 \003(\t\"9\n\016CreateShardArg\022\'\n\004sqls\030"
      "\001 \001(\0132\031.clickhouse.SqlCommonInfo\"V\n\014Drop"
      "ShardArg\022\'\n\004sqls\030\001 \001(\0132\031.clickhouse.SqlC"
      "ommonInfo\022\035\n\025ignore_nonexist_shard\030\002 \001(\010"
      "\";\n\020TruncateShardArg\022\'\n\004sqls\030\001 \001(\0132\031.cli"
      "ckhouse.SqlCommonInfo\"7\n\014DropTableArg\022\'\n"
      "\004sqls\030\001 \001(\0132\031.clickhouse.SqlCommonInfo\"i"
      "\n\022ChangeTableNameArg\022\'\n\004sqls\030\001 \001(\0132\031.cli"
      "ckhouse.SqlCommonInfo\022\022\n\ntable_name\030\002 \001("
      "\t\022\026\n\016new_table_name\030\003 \001(\t\";\n\020ChangeColNa"
      "meArg\022\'\n\004sqls\030\001 \001(\0132\031.clickhouse.SqlComm"
      "onInfo\";\n\020ChangeColTypeArg\022\'\n\004sqls\030\001 \001(\013"
      "2\031.clickhouse.SqlCommonInfo\"4\n\tAddColArg"
      "\022\'\n\004sqls\030\001 \001(\0132\031.clickhouse.SqlCommonInf"
      "o\"5\n\nDropColArg\022\'\n\004sqls\030\001 \001(\0132\031.clickhou"
      "se.SqlCommonInfo\";\n\020ChangeIdxNameArg\022\'\n\004"
      "sqls\030\001 \001(\0132\031.clickhouse.SqlCommonInfo\"4\n"
      "\tAddIdxArg\022\'\n\004sqls\030\001 \001(\0132\031.clickhouse.Sq"
      "lCommonInfo\"5\n\nDropIdxArg\022\'\n\004sqls\030\001 \001(\0132"
      "\031.clickhouse.SqlCommonInfo\"c\n\016ShardDelet"
      "eArg\022\'\n\004sqls\030\001 \001(\0132\031.clickhouse.SqlCommo"
      "nInfo\022\016\n\006txn_id\030\002 \001(\t\022\030\n\020success_node_cn"
      "t\030\003 \001(\005\"g\n\021ShardDeleteResult\022&\n\006result\030\001"
      " \001(\0132\026.clickhouse.BoolResult\022\021\n\tshard_id"
      "s\030\002 \003(\t\022\027\n\017deleted_row_cnt\030\003 \003(\003\"c\n\016Shar"
      "dUpdateArg\022\'\n\004sqls\030\001 \001(\0132\031.clickhouse.Sq"
      "lCommonInfo\022\016\n\006txn_id\030\002 \001(\t\022\030\n\020success_n"
      "ode_cnt\030\003 \001(\005\"g\n\021ShardUpdateResult\022&\n\006re"
      "sult\030\001 \001(\0132\026.clickhouse.BoolResult\022\021\n\tsh"
      "ard_ids\030\002 \003(\t\022\027\n\017deleted_row_cnt\030\003 \003(\003\"\244"
      "\001\n\016ShardInsertArg\022\'\n\004sqls\030\001 \001(\0132\031.clickh"
      "ouse.SqlCommonInfo\022\016\n\006txn_id\030\002 \001(\t\022\017\n\007ro"
      "w_cnt\030\003 \001(\005\022.\n\017col_values_list\030\004 \003(\0132\025.c"
      "lickhouse.ColValues\022\030\n\020success_node_cnt\030"
      "\005 \001(\005\"P\n\tColValues\022\014\n\004type\030\001 \001(\005\022\020\n\010type"
      "_mod\030\002 \001(\005\022\020\n\010null_bmp\030\003 \001(\014\022\021\n\tdata_lis"
      "t\030\004 \003(\014\"a\n\014LocatedShard\022\025\n\rstorageNodeId"
      "\030\001 \001(\t\022\014\n\004host\030\002 \001(\t\022\020\n\010grpcPort\030\003 \001(\005\022\014"
      "\n\004rack\030\004 \001(\t\022\014\n\004zone\030\005 \001(\t\"U\n\005Shard\022\022\n\nt"
      "able_name\030\001 \001(\t\022\020\n\010shard_id\030\002 \001(\003\022&\n\004loc"
      "s\030\003 \003(\0132\030.clickhouse.LocatedShard\"^\n\021Sha"
      "rdReadShardArg\022\'\n\tshard_arg\030\001 \001(\0132\024.clic"
      "khouse.ShardArg\022\023\n\013snapshot_id\030\002 \001(\t\022\013\n\003"
      "sql\030\003 \001(\t\"R\n\017ShardReadResult\022\017\n\007row_cnt\030"
      "\001 \001(\005\022.\n\017col_values_list\030\002 \003(\0132\025.clickho"
      "use.ColValues\"b\n\014ShardReadArg\022/\n\010read_ar"
      "g\030\001 \001(\0132\035.clickhouse.ShardReadShardArg\022!"
      "\n\006shards\030\002 \003(\0132\021.clickhouse.Shard\"%\n\016Get"
      "SnapshotArg\022\023\n\013snapshot_id\030\001 \001(\t\")\n\022Rele"
      "aseSnapshotArg\022\023\n\013snapshot_id\030\001 \001(\t\"E\n\010B"
      "eginArg\022\016\n\006txn_id\030\001 \001(\t\022\024\n\014set_snapshot\030"
      "\002 \001(\010\022\023\n\013disable_wal\030\003 \001(\010\"\033\n\tCommitArg\022"
      "\016\n\006txn_id\030\001 \001(\t\"\035\n\013RollbackArg\022\016\n\006txn_id"
      "\030\001 \001(\t\"$\n\016TableShardsArg\022\022\n\ntable_name\030\001"
      " \001(\t\"b\n\021TableShardsResult\022&\n\006result\030\001 \001("
      "\0132\026.clickhouse.BoolResult\022\022\n\ntable_name\030"
      "\002 \001(\t\022\021\n\tshard_ids\030\003 \003(\0032\270\014\n\006Worker\022C\n\013C"
      "reateShard\022\032.clickhouse.CreateShardArg\032\026"
      ".clickhouse.BoolResult\"\000\022\?\n\tDropShard\022\030."
      "clickhouse.DropShardArg\032\026.clickhouse.Boo"
      "lResult\"\000\022G\n\rTruncateShard\022\034.clickhouse."
      "TruncateShardArg\032\026.clickhouse.BoolResult"
      "\"\000\022\?\n\tDropTable\022\030.clickhouse.DropTableAr"
      "g\032\026.clickhouse.BoolResult\"\000\022K\n\017ChangeTab"
      "leName\022\036.clickhouse.ChangeTableNameArg\032\026"
      ".clickhouse.BoolResult\"\000\022G\n\rChangeColNam"
      "e\022\034.clickhouse.ChangeColNameArg\032\026.clickh"
      "ouse.BoolResult\"\000\022G\n\rChangeColType\022\034.cli"
      "ckhouse.ChangeColTypeArg\032\026.clickhouse.Bo"
      "olResult\"\000\0229\n\006AddCol\022\025.clickhouse.AddCol"
      "Arg\032\026.clickhouse.BoolResult\"\000\022;\n\007DropCol"
      "\022\026.clickhouse.DropColArg\032\026.clickhouse.Bo"
      "olResult\"\000\022G\n\rChangeIdxName\022\034.clickhouse"
      ".ChangeIdxNameArg\032\026.clickhouse.BoolResul"
      "t\"\000\0229\n\006AddIdx\022\025.clickhouse.AddIdxArg\032\026.c"
      "lickhouse.BoolResult\"\000\022;\n\007DropIdx\022\026.clic"
      "khouse.DropIdxArg\032\026.clickhouse.BoolResul"
      "t\"\000\022C\n\013GetSnapshot\022\032.clickhouse.GetSnaps"
      "hotArg\032\026.clickhouse.BoolResult\"\000\022K\n\017Rele"
      "aseSnapshot\022\036.clickhouse.ReleaseSnapshot"
      "Arg\032\026.clickhouse.BoolResult\"\000\022P\n\016ShardRe"
      "adShard\022\035.clickhouse.ShardReadShardArg\032\033"
      ".clickhouse.ShardReadResult\"\0000\001\022F\n\tShard"
      "Read\022\030.clickhouse.ShardReadArg\032\033.clickho"
      "use.ShardReadResult\"\0000\001\0227\n\005Begin\022\024.click"
      "house.BeginArg\032\026.clickhouse.BoolResult\"\000"
      "\0229\n\006Commit\022\025.clickhouse.CommitArg\032\026.clic"
      "khouse.BoolResult\"\000\022=\n\010Rollback\022\027.clickh"
      "ouse.RollbackArg\032\026.clickhouse.BoolResult"
      "\"\000\022C\n\013ShardInsert\022\032.clickhouse.ShardInse"
      "rtArg\032\026.clickhouse.BoolResult\"\000\022J\n\013Shard"
      "Delete\022\032.clickhouse.ShardDeleteArg\032\035.cli"
      "ckhouse.ShardDeleteResult\"\000\022J\n\013ShardUpda"
      "te\022\032.clickhouse.ShardUpdateArg\032\035.clickho"
      "use.ShardUpdateResult\"\000\022J\n\013TableShards\022\032"
      ".clickhouse.TableShardsArg\032\035.clickhouse."
      "TableShardsResult\"\000B8\n(com.datapps.linko"
      "opdb.clickhouse.noderpcB\nNodeProtosP\001b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4125);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "clickhouse.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_clickhouse_2eproto
namespace clickhouse {

// ===================================================================

void BoolResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoolResult::kOkFieldNumber;
const int BoolResult::kErrinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoolResult::BoolResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsBoolResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.BoolResult)
}
BoolResult::BoolResult(const BoolResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errinfo().size() > 0) {
    errinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errinfo_);
  }
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:clickhouse.BoolResult)
}

void BoolResult::SharedCtor() {
  errinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ok_ = false;
  _cached_size_ = 0;
}

BoolResult::~BoolResult() {
  // @@protoc_insertion_point(destructor:clickhouse.BoolResult)
  SharedDtor();
}

void BoolResult::SharedDtor() {
  errinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BoolResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoolResult::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoolResult& BoolResult::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsBoolResult();
  return *internal_default_instance();
}

BoolResult* BoolResult::New(::google::protobuf::Arena* arena) const {
  BoolResult* n = new BoolResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoolResult::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.BoolResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ok_ = false;
  _internal_metadata_.Clear();
}

bool BoolResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.BoolResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool ok = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errinfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errinfo().data(), static_cast<int>(this->errinfo().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.BoolResult.errinfo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.BoolResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.BoolResult)
  return false;
#undef DO_
}

void BoolResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.BoolResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ok(), output);
  }

  // string errinfo = 2;
  if (this->errinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errinfo().data(), static_cast<int>(this->errinfo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.BoolResult.errinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errinfo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.BoolResult)
}

::google::protobuf::uint8* BoolResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.BoolResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ok(), target);
  }

  // string errinfo = 2;
  if (this->errinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errinfo().data(), static_cast<int>(this->errinfo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.BoolResult.errinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errinfo(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.BoolResult)
  return target;
}

size_t BoolResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.BoolResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string errinfo = 2;
  if (this->errinfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errinfo());
  }

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoolResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.BoolResult)
  GOOGLE_DCHECK_NE(&from, this);
  const BoolResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoolResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.BoolResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.BoolResult)
    MergeFrom(*source);
  }
}

void BoolResult::MergeFrom(const BoolResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.BoolResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errinfo().size() > 0) {

    errinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errinfo_);
  }
  if (from.ok() != 0) {
    set_ok(from.ok());
  }
}

void BoolResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.BoolResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolResult::CopyFrom(const BoolResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.BoolResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolResult::IsInitialized() const {
  return true;
}

void BoolResult::Swap(BoolResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoolResult::InternalSwap(BoolResult* other) {
  using std::swap;
  errinfo_.Swap(&other->errinfo_);
  swap(ok_, other->ok_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoolResult::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShardArg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShardArg::kTableNameFieldNumber;
const int ShardArg::kShardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShardArg::ShardArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsShardArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.ShardArg)
}
ShardArg::ShardArg(const ShardArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  shard_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.shard_id().size() > 0) {
    shard_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shard_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.ShardArg)
}

void ShardArg::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shard_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ShardArg::~ShardArg() {
  // @@protoc_insertion_point(destructor:clickhouse.ShardArg)
  SharedDtor();
}

void ShardArg::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shard_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShardArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShardArg& ShardArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsShardArg();
  return *internal_default_instance();
}

ShardArg* ShardArg::New(::google::protobuf::Arena* arena) const {
  ShardArg* n = new ShardArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShardArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.ShardArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shard_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ShardArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.ShardArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.ShardArg.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string shard_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shard_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shard_id().data(), static_cast<int>(this->shard_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.ShardArg.shard_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.ShardArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.ShardArg)
  return false;
#undef DO_
}

void ShardArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.ShardArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardArg.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // string shard_id = 2;
  if (this->shard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_id().data(), static_cast<int>(this->shard_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardArg.shard_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->shard_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.ShardArg)
}

::google::protobuf::uint8* ShardArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.ShardArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardArg.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // string shard_id = 2;
  if (this->shard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_id().data(), static_cast<int>(this->shard_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardArg.shard_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->shard_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.ShardArg)
  return target;
}

size_t ShardArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.ShardArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // string shard_id = 2;
  if (this->shard_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shard_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.ShardArg)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShardArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.ShardArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.ShardArg)
    MergeFrom(*source);
  }
}

void ShardArg::MergeFrom(const ShardArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.ShardArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.shard_id().size() > 0) {

    shard_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shard_id_);
  }
}

void ShardArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.ShardArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardArg::CopyFrom(const ShardArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.ShardArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardArg::IsInitialized() const {
  return true;
}

void ShardArg::Swap(ShardArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShardArg::InternalSwap(ShardArg* other) {
  using std::swap;
  table_name_.Swap(&other->table_name_);
  shard_id_.Swap(&other->shard_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShardArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SqlCommonInfo::InitAsDefaultInstance() {
  ::clickhouse::_SqlCommonInfo_default_instance_._instance.get_mutable()->shard_arg_ = const_cast< ::clickhouse::ShardArg*>(
      ::clickhouse::ShardArg::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SqlCommonInfo::kShardArgFieldNumber;
const int SqlCommonInfo::kShardIdsFieldNumber;
const int SqlCommonInfo::kSqlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SqlCommonInfo::SqlCommonInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.SqlCommonInfo)
}
SqlCommonInfo::SqlCommonInfo(const SqlCommonInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shard_ids_(from.shard_ids_),
      sql_(from.sql_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shard_arg()) {
    shard_arg_ = new ::clickhouse::ShardArg(*from.shard_arg_);
  } else {
    shard_arg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.SqlCommonInfo)
}

void SqlCommonInfo::SharedCtor() {
  shard_arg_ = NULL;
  _cached_size_ = 0;
}

SqlCommonInfo::~SqlCommonInfo() {
  // @@protoc_insertion_point(destructor:clickhouse.SqlCommonInfo)
  SharedDtor();
}

void SqlCommonInfo::SharedDtor() {
  if (this != internal_default_instance()) delete shard_arg_;
}

void SqlCommonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SqlCommonInfo::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SqlCommonInfo& SqlCommonInfo::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsSqlCommonInfo();
  return *internal_default_instance();
}

SqlCommonInfo* SqlCommonInfo::New(::google::protobuf::Arena* arena) const {
  SqlCommonInfo* n = new SqlCommonInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SqlCommonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.SqlCommonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shard_ids_.Clear();
  sql_.Clear();
  if (GetArenaNoVirtual() == NULL && shard_arg_ != NULL) {
    delete shard_arg_;
  }
  shard_arg_ = NULL;
  _internal_metadata_.Clear();
}

bool SqlCommonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.SqlCommonInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.ShardArg shard_arg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shard_arg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string shard_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_shard_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shard_ids(this->shard_ids_size() - 1).data(),
            static_cast<int>(this->shard_ids(this->shard_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.SqlCommonInfo.shard_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string sql = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sql()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sql(this->sql_size() - 1).data(),
            static_cast<int>(this->sql(this->sql_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.SqlCommonInfo.sql"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.SqlCommonInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.SqlCommonInfo)
  return false;
#undef DO_
}

void SqlCommonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.SqlCommonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.ShardArg shard_arg = 1;
  if (this->has_shard_arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shard_arg_, output);
  }

  // repeated string shard_ids = 2;
  for (int i = 0, n = this->shard_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_ids(i).data(), static_cast<int>(this->shard_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.SqlCommonInfo.shard_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->shard_ids(i), output);
  }

  // repeated string sql = 3;
  for (int i = 0, n = this->sql_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql(i).data(), static_cast<int>(this->sql(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.SqlCommonInfo.sql");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sql(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.SqlCommonInfo)
}

::google::protobuf::uint8* SqlCommonInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.SqlCommonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.ShardArg shard_arg = 1;
  if (this->has_shard_arg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->shard_arg_, deterministic, target);
  }

  // repeated string shard_ids = 2;
  for (int i = 0, n = this->shard_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_ids(i).data(), static_cast<int>(this->shard_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.SqlCommonInfo.shard_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->shard_ids(i), target);
  }

  // repeated string sql = 3;
  for (int i = 0, n = this->sql_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql(i).data(), static_cast<int>(this->sql(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.SqlCommonInfo.sql");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->sql(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.SqlCommonInfo)
  return target;
}

size_t SqlCommonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.SqlCommonInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string shard_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->shard_ids_size());
  for (int i = 0, n = this->shard_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->shard_ids(i));
  }

  // repeated string sql = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sql_size());
  for (int i = 0, n = this->sql_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sql(i));
  }

  // .clickhouse.ShardArg shard_arg = 1;
  if (this->has_shard_arg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->shard_arg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SqlCommonInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.SqlCommonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SqlCommonInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SqlCommonInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.SqlCommonInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.SqlCommonInfo)
    MergeFrom(*source);
  }
}

void SqlCommonInfo::MergeFrom(const SqlCommonInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.SqlCommonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shard_ids_.MergeFrom(from.shard_ids_);
  sql_.MergeFrom(from.sql_);
  if (from.has_shard_arg()) {
    mutable_shard_arg()->::clickhouse::ShardArg::MergeFrom(from.shard_arg());
  }
}

void SqlCommonInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.SqlCommonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SqlCommonInfo::CopyFrom(const SqlCommonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.SqlCommonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SqlCommonInfo::IsInitialized() const {
  return true;
}

void SqlCommonInfo::Swap(SqlCommonInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SqlCommonInfo::InternalSwap(SqlCommonInfo* other) {
  using std::swap;
  shard_ids_.InternalSwap(&other->shard_ids_);
  sql_.InternalSwap(&other->sql_);
  swap(shard_arg_, other->shard_arg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SqlCommonInfo::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateShardArg::InitAsDefaultInstance() {
  ::clickhouse::_CreateShardArg_default_instance_._instance.get_mutable()->sqls_ = const_cast< ::clickhouse::SqlCommonInfo*>(
      ::clickhouse::SqlCommonInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateShardArg::kSqlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateShardArg::CreateShardArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsCreateShardArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.CreateShardArg)
}
CreateShardArg::CreateShardArg(const CreateShardArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sqls()) {
    sqls_ = new ::clickhouse::SqlCommonInfo(*from.sqls_);
  } else {
    sqls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.CreateShardArg)
}

void CreateShardArg::SharedCtor() {
  sqls_ = NULL;
  _cached_size_ = 0;
}

CreateShardArg::~CreateShardArg() {
  // @@protoc_insertion_point(destructor:clickhouse.CreateShardArg)
  SharedDtor();
}

void CreateShardArg::SharedDtor() {
  if (this != internal_default_instance()) delete sqls_;
}

void CreateShardArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateShardArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateShardArg& CreateShardArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsCreateShardArg();
  return *internal_default_instance();
}

CreateShardArg* CreateShardArg::New(::google::protobuf::Arena* arena) const {
  CreateShardArg* n = new CreateShardArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateShardArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.CreateShardArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sqls_ != NULL) {
    delete sqls_;
  }
  sqls_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateShardArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.CreateShardArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.SqlCommonInfo sqls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sqls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.CreateShardArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.CreateShardArg)
  return false;
#undef DO_
}

void CreateShardArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.CreateShardArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sqls_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.CreateShardArg)
}

::google::protobuf::uint8* CreateShardArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.CreateShardArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sqls_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.CreateShardArg)
  return target;
}

size_t CreateShardArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.CreateShardArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sqls_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateShardArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.CreateShardArg)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateShardArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateShardArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.CreateShardArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.CreateShardArg)
    MergeFrom(*source);
  }
}

void CreateShardArg::MergeFrom(const CreateShardArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.CreateShardArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sqls()) {
    mutable_sqls()->::clickhouse::SqlCommonInfo::MergeFrom(from.sqls());
  }
}

void CreateShardArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.CreateShardArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateShardArg::CopyFrom(const CreateShardArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.CreateShardArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateShardArg::IsInitialized() const {
  return true;
}

void CreateShardArg::Swap(CreateShardArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateShardArg::InternalSwap(CreateShardArg* other) {
  using std::swap;
  swap(sqls_, other->sqls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateShardArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DropShardArg::InitAsDefaultInstance() {
  ::clickhouse::_DropShardArg_default_instance_._instance.get_mutable()->sqls_ = const_cast< ::clickhouse::SqlCommonInfo*>(
      ::clickhouse::SqlCommonInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropShardArg::kSqlsFieldNumber;
const int DropShardArg::kIgnoreNonexistShardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropShardArg::DropShardArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsDropShardArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.DropShardArg)
}
DropShardArg::DropShardArg(const DropShardArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sqls()) {
    sqls_ = new ::clickhouse::SqlCommonInfo(*from.sqls_);
  } else {
    sqls_ = NULL;
  }
  ignore_nonexist_shard_ = from.ignore_nonexist_shard_;
  // @@protoc_insertion_point(copy_constructor:clickhouse.DropShardArg)
}

void DropShardArg::SharedCtor() {
  ::memset(&sqls_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_nonexist_shard_) -
      reinterpret_cast<char*>(&sqls_)) + sizeof(ignore_nonexist_shard_));
  _cached_size_ = 0;
}

DropShardArg::~DropShardArg() {
  // @@protoc_insertion_point(destructor:clickhouse.DropShardArg)
  SharedDtor();
}

void DropShardArg::SharedDtor() {
  if (this != internal_default_instance()) delete sqls_;
}

void DropShardArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropShardArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DropShardArg& DropShardArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsDropShardArg();
  return *internal_default_instance();
}

DropShardArg* DropShardArg::New(::google::protobuf::Arena* arena) const {
  DropShardArg* n = new DropShardArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropShardArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.DropShardArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sqls_ != NULL) {
    delete sqls_;
  }
  sqls_ = NULL;
  ignore_nonexist_shard_ = false;
  _internal_metadata_.Clear();
}

bool DropShardArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.DropShardArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.SqlCommonInfo sqls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sqls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ignore_nonexist_shard = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_nonexist_shard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.DropShardArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.DropShardArg)
  return false;
#undef DO_
}

void DropShardArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.DropShardArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sqls_, output);
  }

  // bool ignore_nonexist_shard = 2;
  if (this->ignore_nonexist_shard() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ignore_nonexist_shard(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.DropShardArg)
}

::google::protobuf::uint8* DropShardArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.DropShardArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sqls_, deterministic, target);
  }

  // bool ignore_nonexist_shard = 2;
  if (this->ignore_nonexist_shard() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ignore_nonexist_shard(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.DropShardArg)
  return target;
}

size_t DropShardArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.DropShardArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sqls_);
  }

  // bool ignore_nonexist_shard = 2;
  if (this->ignore_nonexist_shard() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropShardArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.DropShardArg)
  GOOGLE_DCHECK_NE(&from, this);
  const DropShardArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropShardArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.DropShardArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.DropShardArg)
    MergeFrom(*source);
  }
}

void DropShardArg::MergeFrom(const DropShardArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.DropShardArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sqls()) {
    mutable_sqls()->::clickhouse::SqlCommonInfo::MergeFrom(from.sqls());
  }
  if (from.ignore_nonexist_shard() != 0) {
    set_ignore_nonexist_shard(from.ignore_nonexist_shard());
  }
}

void DropShardArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.DropShardArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropShardArg::CopyFrom(const DropShardArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.DropShardArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropShardArg::IsInitialized() const {
  return true;
}

void DropShardArg::Swap(DropShardArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropShardArg::InternalSwap(DropShardArg* other) {
  using std::swap;
  swap(sqls_, other->sqls_);
  swap(ignore_nonexist_shard_, other->ignore_nonexist_shard_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropShardArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TruncateShardArg::InitAsDefaultInstance() {
  ::clickhouse::_TruncateShardArg_default_instance_._instance.get_mutable()->sqls_ = const_cast< ::clickhouse::SqlCommonInfo*>(
      ::clickhouse::SqlCommonInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TruncateShardArg::kSqlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TruncateShardArg::TruncateShardArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsTruncateShardArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.TruncateShardArg)
}
TruncateShardArg::TruncateShardArg(const TruncateShardArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sqls()) {
    sqls_ = new ::clickhouse::SqlCommonInfo(*from.sqls_);
  } else {
    sqls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.TruncateShardArg)
}

void TruncateShardArg::SharedCtor() {
  sqls_ = NULL;
  _cached_size_ = 0;
}

TruncateShardArg::~TruncateShardArg() {
  // @@protoc_insertion_point(destructor:clickhouse.TruncateShardArg)
  SharedDtor();
}

void TruncateShardArg::SharedDtor() {
  if (this != internal_default_instance()) delete sqls_;
}

void TruncateShardArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruncateShardArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TruncateShardArg& TruncateShardArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsTruncateShardArg();
  return *internal_default_instance();
}

TruncateShardArg* TruncateShardArg::New(::google::protobuf::Arena* arena) const {
  TruncateShardArg* n = new TruncateShardArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TruncateShardArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.TruncateShardArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sqls_ != NULL) {
    delete sqls_;
  }
  sqls_ = NULL;
  _internal_metadata_.Clear();
}

bool TruncateShardArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.TruncateShardArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.SqlCommonInfo sqls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sqls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.TruncateShardArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.TruncateShardArg)
  return false;
#undef DO_
}

void TruncateShardArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.TruncateShardArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sqls_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.TruncateShardArg)
}

::google::protobuf::uint8* TruncateShardArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.TruncateShardArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sqls_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.TruncateShardArg)
  return target;
}

size_t TruncateShardArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.TruncateShardArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sqls_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruncateShardArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.TruncateShardArg)
  GOOGLE_DCHECK_NE(&from, this);
  const TruncateShardArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TruncateShardArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.TruncateShardArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.TruncateShardArg)
    MergeFrom(*source);
  }
}

void TruncateShardArg::MergeFrom(const TruncateShardArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.TruncateShardArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sqls()) {
    mutable_sqls()->::clickhouse::SqlCommonInfo::MergeFrom(from.sqls());
  }
}

void TruncateShardArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.TruncateShardArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncateShardArg::CopyFrom(const TruncateShardArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.TruncateShardArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateShardArg::IsInitialized() const {
  return true;
}

void TruncateShardArg::Swap(TruncateShardArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TruncateShardArg::InternalSwap(TruncateShardArg* other) {
  using std::swap;
  swap(sqls_, other->sqls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TruncateShardArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DropTableArg::InitAsDefaultInstance() {
  ::clickhouse::_DropTableArg_default_instance_._instance.get_mutable()->sqls_ = const_cast< ::clickhouse::SqlCommonInfo*>(
      ::clickhouse::SqlCommonInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropTableArg::kSqlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropTableArg::DropTableArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsDropTableArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.DropTableArg)
}
DropTableArg::DropTableArg(const DropTableArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sqls()) {
    sqls_ = new ::clickhouse::SqlCommonInfo(*from.sqls_);
  } else {
    sqls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.DropTableArg)
}

void DropTableArg::SharedCtor() {
  sqls_ = NULL;
  _cached_size_ = 0;
}

DropTableArg::~DropTableArg() {
  // @@protoc_insertion_point(destructor:clickhouse.DropTableArg)
  SharedDtor();
}

void DropTableArg::SharedDtor() {
  if (this != internal_default_instance()) delete sqls_;
}

void DropTableArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropTableArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DropTableArg& DropTableArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsDropTableArg();
  return *internal_default_instance();
}

DropTableArg* DropTableArg::New(::google::protobuf::Arena* arena) const {
  DropTableArg* n = new DropTableArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropTableArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.DropTableArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sqls_ != NULL) {
    delete sqls_;
  }
  sqls_ = NULL;
  _internal_metadata_.Clear();
}

bool DropTableArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.DropTableArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.SqlCommonInfo sqls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sqls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.DropTableArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.DropTableArg)
  return false;
#undef DO_
}

void DropTableArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.DropTableArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sqls_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.DropTableArg)
}

::google::protobuf::uint8* DropTableArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.DropTableArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sqls_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.DropTableArg)
  return target;
}

size_t DropTableArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.DropTableArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sqls_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropTableArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.DropTableArg)
  GOOGLE_DCHECK_NE(&from, this);
  const DropTableArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropTableArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.DropTableArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.DropTableArg)
    MergeFrom(*source);
  }
}

void DropTableArg::MergeFrom(const DropTableArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.DropTableArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sqls()) {
    mutable_sqls()->::clickhouse::SqlCommonInfo::MergeFrom(from.sqls());
  }
}

void DropTableArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.DropTableArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropTableArg::CopyFrom(const DropTableArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.DropTableArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropTableArg::IsInitialized() const {
  return true;
}

void DropTableArg::Swap(DropTableArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropTableArg::InternalSwap(DropTableArg* other) {
  using std::swap;
  swap(sqls_, other->sqls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropTableArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChangeTableNameArg::InitAsDefaultInstance() {
  ::clickhouse::_ChangeTableNameArg_default_instance_._instance.get_mutable()->sqls_ = const_cast< ::clickhouse::SqlCommonInfo*>(
      ::clickhouse::SqlCommonInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeTableNameArg::kSqlsFieldNumber;
const int ChangeTableNameArg::kTableNameFieldNumber;
const int ChangeTableNameArg::kNewTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeTableNameArg::ChangeTableNameArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsChangeTableNameArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.ChangeTableNameArg)
}
ChangeTableNameArg::ChangeTableNameArg(const ChangeTableNameArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  new_table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.new_table_name().size() > 0) {
    new_table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_table_name_);
  }
  if (from.has_sqls()) {
    sqls_ = new ::clickhouse::SqlCommonInfo(*from.sqls_);
  } else {
    sqls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.ChangeTableNameArg)
}

void ChangeTableNameArg::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sqls_ = NULL;
  _cached_size_ = 0;
}

ChangeTableNameArg::~ChangeTableNameArg() {
  // @@protoc_insertion_point(destructor:clickhouse.ChangeTableNameArg)
  SharedDtor();
}

void ChangeTableNameArg::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sqls_;
}

void ChangeTableNameArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeTableNameArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeTableNameArg& ChangeTableNameArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsChangeTableNameArg();
  return *internal_default_instance();
}

ChangeTableNameArg* ChangeTableNameArg::New(::google::protobuf::Arena* arena) const {
  ChangeTableNameArg* n = new ChangeTableNameArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeTableNameArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.ChangeTableNameArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sqls_ != NULL) {
    delete sqls_;
  }
  sqls_ = NULL;
  _internal_metadata_.Clear();
}

bool ChangeTableNameArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.ChangeTableNameArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.SqlCommonInfo sqls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sqls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.ChangeTableNameArg.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string new_table_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->new_table_name().data(), static_cast<int>(this->new_table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.ChangeTableNameArg.new_table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.ChangeTableNameArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.ChangeTableNameArg)
  return false;
#undef DO_
}

void ChangeTableNameArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.ChangeTableNameArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sqls_, output);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ChangeTableNameArg.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table_name(), output);
  }

  // string new_table_name = 3;
  if (this->new_table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_table_name().data(), static_cast<int>(this->new_table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ChangeTableNameArg.new_table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->new_table_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.ChangeTableNameArg)
}

::google::protobuf::uint8* ChangeTableNameArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.ChangeTableNameArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sqls_, deterministic, target);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ChangeTableNameArg.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }

  // string new_table_name = 3;
  if (this->new_table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_table_name().data(), static_cast<int>(this->new_table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ChangeTableNameArg.new_table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->new_table_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.ChangeTableNameArg)
  return target;
}

size_t ChangeTableNameArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.ChangeTableNameArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string table_name = 2;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // string new_table_name = 3;
  if (this->new_table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_table_name());
  }

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sqls_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeTableNameArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.ChangeTableNameArg)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeTableNameArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeTableNameArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.ChangeTableNameArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.ChangeTableNameArg)
    MergeFrom(*source);
  }
}

void ChangeTableNameArg::MergeFrom(const ChangeTableNameArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.ChangeTableNameArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.new_table_name().size() > 0) {

    new_table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_table_name_);
  }
  if (from.has_sqls()) {
    mutable_sqls()->::clickhouse::SqlCommonInfo::MergeFrom(from.sqls());
  }
}

void ChangeTableNameArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.ChangeTableNameArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeTableNameArg::CopyFrom(const ChangeTableNameArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.ChangeTableNameArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeTableNameArg::IsInitialized() const {
  return true;
}

void ChangeTableNameArg::Swap(ChangeTableNameArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeTableNameArg::InternalSwap(ChangeTableNameArg* other) {
  using std::swap;
  table_name_.Swap(&other->table_name_);
  new_table_name_.Swap(&other->new_table_name_);
  swap(sqls_, other->sqls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeTableNameArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChangeColNameArg::InitAsDefaultInstance() {
  ::clickhouse::_ChangeColNameArg_default_instance_._instance.get_mutable()->sqls_ = const_cast< ::clickhouse::SqlCommonInfo*>(
      ::clickhouse::SqlCommonInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeColNameArg::kSqlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeColNameArg::ChangeColNameArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsChangeColNameArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.ChangeColNameArg)
}
ChangeColNameArg::ChangeColNameArg(const ChangeColNameArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sqls()) {
    sqls_ = new ::clickhouse::SqlCommonInfo(*from.sqls_);
  } else {
    sqls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.ChangeColNameArg)
}

void ChangeColNameArg::SharedCtor() {
  sqls_ = NULL;
  _cached_size_ = 0;
}

ChangeColNameArg::~ChangeColNameArg() {
  // @@protoc_insertion_point(destructor:clickhouse.ChangeColNameArg)
  SharedDtor();
}

void ChangeColNameArg::SharedDtor() {
  if (this != internal_default_instance()) delete sqls_;
}

void ChangeColNameArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeColNameArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeColNameArg& ChangeColNameArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsChangeColNameArg();
  return *internal_default_instance();
}

ChangeColNameArg* ChangeColNameArg::New(::google::protobuf::Arena* arena) const {
  ChangeColNameArg* n = new ChangeColNameArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeColNameArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.ChangeColNameArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sqls_ != NULL) {
    delete sqls_;
  }
  sqls_ = NULL;
  _internal_metadata_.Clear();
}

bool ChangeColNameArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.ChangeColNameArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.SqlCommonInfo sqls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sqls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.ChangeColNameArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.ChangeColNameArg)
  return false;
#undef DO_
}

void ChangeColNameArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.ChangeColNameArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sqls_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.ChangeColNameArg)
}

::google::protobuf::uint8* ChangeColNameArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.ChangeColNameArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sqls_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.ChangeColNameArg)
  return target;
}

size_t ChangeColNameArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.ChangeColNameArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sqls_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeColNameArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.ChangeColNameArg)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeColNameArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeColNameArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.ChangeColNameArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.ChangeColNameArg)
    MergeFrom(*source);
  }
}

void ChangeColNameArg::MergeFrom(const ChangeColNameArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.ChangeColNameArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sqls()) {
    mutable_sqls()->::clickhouse::SqlCommonInfo::MergeFrom(from.sqls());
  }
}

void ChangeColNameArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.ChangeColNameArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeColNameArg::CopyFrom(const ChangeColNameArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.ChangeColNameArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeColNameArg::IsInitialized() const {
  return true;
}

void ChangeColNameArg::Swap(ChangeColNameArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeColNameArg::InternalSwap(ChangeColNameArg* other) {
  using std::swap;
  swap(sqls_, other->sqls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeColNameArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChangeColTypeArg::InitAsDefaultInstance() {
  ::clickhouse::_ChangeColTypeArg_default_instance_._instance.get_mutable()->sqls_ = const_cast< ::clickhouse::SqlCommonInfo*>(
      ::clickhouse::SqlCommonInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeColTypeArg::kSqlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeColTypeArg::ChangeColTypeArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsChangeColTypeArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.ChangeColTypeArg)
}
ChangeColTypeArg::ChangeColTypeArg(const ChangeColTypeArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sqls()) {
    sqls_ = new ::clickhouse::SqlCommonInfo(*from.sqls_);
  } else {
    sqls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.ChangeColTypeArg)
}

void ChangeColTypeArg::SharedCtor() {
  sqls_ = NULL;
  _cached_size_ = 0;
}

ChangeColTypeArg::~ChangeColTypeArg() {
  // @@protoc_insertion_point(destructor:clickhouse.ChangeColTypeArg)
  SharedDtor();
}

void ChangeColTypeArg::SharedDtor() {
  if (this != internal_default_instance()) delete sqls_;
}

void ChangeColTypeArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeColTypeArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeColTypeArg& ChangeColTypeArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsChangeColTypeArg();
  return *internal_default_instance();
}

ChangeColTypeArg* ChangeColTypeArg::New(::google::protobuf::Arena* arena) const {
  ChangeColTypeArg* n = new ChangeColTypeArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeColTypeArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.ChangeColTypeArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sqls_ != NULL) {
    delete sqls_;
  }
  sqls_ = NULL;
  _internal_metadata_.Clear();
}

bool ChangeColTypeArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.ChangeColTypeArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.SqlCommonInfo sqls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sqls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.ChangeColTypeArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.ChangeColTypeArg)
  return false;
#undef DO_
}

void ChangeColTypeArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.ChangeColTypeArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sqls_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.ChangeColTypeArg)
}

::google::protobuf::uint8* ChangeColTypeArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.ChangeColTypeArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sqls_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.ChangeColTypeArg)
  return target;
}

size_t ChangeColTypeArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.ChangeColTypeArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sqls_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeColTypeArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.ChangeColTypeArg)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeColTypeArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeColTypeArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.ChangeColTypeArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.ChangeColTypeArg)
    MergeFrom(*source);
  }
}

void ChangeColTypeArg::MergeFrom(const ChangeColTypeArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.ChangeColTypeArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sqls()) {
    mutable_sqls()->::clickhouse::SqlCommonInfo::MergeFrom(from.sqls());
  }
}

void ChangeColTypeArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.ChangeColTypeArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeColTypeArg::CopyFrom(const ChangeColTypeArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.ChangeColTypeArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeColTypeArg::IsInitialized() const {
  return true;
}

void ChangeColTypeArg::Swap(ChangeColTypeArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeColTypeArg::InternalSwap(ChangeColTypeArg* other) {
  using std::swap;
  swap(sqls_, other->sqls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeColTypeArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddColArg::InitAsDefaultInstance() {
  ::clickhouse::_AddColArg_default_instance_._instance.get_mutable()->sqls_ = const_cast< ::clickhouse::SqlCommonInfo*>(
      ::clickhouse::SqlCommonInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddColArg::kSqlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddColArg::AddColArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsAddColArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.AddColArg)
}
AddColArg::AddColArg(const AddColArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sqls()) {
    sqls_ = new ::clickhouse::SqlCommonInfo(*from.sqls_);
  } else {
    sqls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.AddColArg)
}

void AddColArg::SharedCtor() {
  sqls_ = NULL;
  _cached_size_ = 0;
}

AddColArg::~AddColArg() {
  // @@protoc_insertion_point(destructor:clickhouse.AddColArg)
  SharedDtor();
}

void AddColArg::SharedDtor() {
  if (this != internal_default_instance()) delete sqls_;
}

void AddColArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddColArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddColArg& AddColArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsAddColArg();
  return *internal_default_instance();
}

AddColArg* AddColArg::New(::google::protobuf::Arena* arena) const {
  AddColArg* n = new AddColArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddColArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.AddColArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sqls_ != NULL) {
    delete sqls_;
  }
  sqls_ = NULL;
  _internal_metadata_.Clear();
}

bool AddColArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.AddColArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.SqlCommonInfo sqls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sqls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.AddColArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.AddColArg)
  return false;
#undef DO_
}

void AddColArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.AddColArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sqls_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.AddColArg)
}

::google::protobuf::uint8* AddColArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.AddColArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sqls_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.AddColArg)
  return target;
}

size_t AddColArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.AddColArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sqls_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddColArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.AddColArg)
  GOOGLE_DCHECK_NE(&from, this);
  const AddColArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddColArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.AddColArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.AddColArg)
    MergeFrom(*source);
  }
}

void AddColArg::MergeFrom(const AddColArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.AddColArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sqls()) {
    mutable_sqls()->::clickhouse::SqlCommonInfo::MergeFrom(from.sqls());
  }
}

void AddColArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.AddColArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddColArg::CopyFrom(const AddColArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.AddColArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddColArg::IsInitialized() const {
  return true;
}

void AddColArg::Swap(AddColArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddColArg::InternalSwap(AddColArg* other) {
  using std::swap;
  swap(sqls_, other->sqls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddColArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DropColArg::InitAsDefaultInstance() {
  ::clickhouse::_DropColArg_default_instance_._instance.get_mutable()->sqls_ = const_cast< ::clickhouse::SqlCommonInfo*>(
      ::clickhouse::SqlCommonInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropColArg::kSqlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropColArg::DropColArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsDropColArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.DropColArg)
}
DropColArg::DropColArg(const DropColArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sqls()) {
    sqls_ = new ::clickhouse::SqlCommonInfo(*from.sqls_);
  } else {
    sqls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.DropColArg)
}

void DropColArg::SharedCtor() {
  sqls_ = NULL;
  _cached_size_ = 0;
}

DropColArg::~DropColArg() {
  // @@protoc_insertion_point(destructor:clickhouse.DropColArg)
  SharedDtor();
}

void DropColArg::SharedDtor() {
  if (this != internal_default_instance()) delete sqls_;
}

void DropColArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropColArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DropColArg& DropColArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsDropColArg();
  return *internal_default_instance();
}

DropColArg* DropColArg::New(::google::protobuf::Arena* arena) const {
  DropColArg* n = new DropColArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropColArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.DropColArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sqls_ != NULL) {
    delete sqls_;
  }
  sqls_ = NULL;
  _internal_metadata_.Clear();
}

bool DropColArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.DropColArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.SqlCommonInfo sqls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sqls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.DropColArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.DropColArg)
  return false;
#undef DO_
}

void DropColArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.DropColArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sqls_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.DropColArg)
}

::google::protobuf::uint8* DropColArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.DropColArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sqls_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.DropColArg)
  return target;
}

size_t DropColArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.DropColArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sqls_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropColArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.DropColArg)
  GOOGLE_DCHECK_NE(&from, this);
  const DropColArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropColArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.DropColArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.DropColArg)
    MergeFrom(*source);
  }
}

void DropColArg::MergeFrom(const DropColArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.DropColArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sqls()) {
    mutable_sqls()->::clickhouse::SqlCommonInfo::MergeFrom(from.sqls());
  }
}

void DropColArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.DropColArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropColArg::CopyFrom(const DropColArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.DropColArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropColArg::IsInitialized() const {
  return true;
}

void DropColArg::Swap(DropColArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropColArg::InternalSwap(DropColArg* other) {
  using std::swap;
  swap(sqls_, other->sqls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropColArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChangeIdxNameArg::InitAsDefaultInstance() {
  ::clickhouse::_ChangeIdxNameArg_default_instance_._instance.get_mutable()->sqls_ = const_cast< ::clickhouse::SqlCommonInfo*>(
      ::clickhouse::SqlCommonInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeIdxNameArg::kSqlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeIdxNameArg::ChangeIdxNameArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsChangeIdxNameArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.ChangeIdxNameArg)
}
ChangeIdxNameArg::ChangeIdxNameArg(const ChangeIdxNameArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sqls()) {
    sqls_ = new ::clickhouse::SqlCommonInfo(*from.sqls_);
  } else {
    sqls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.ChangeIdxNameArg)
}

void ChangeIdxNameArg::SharedCtor() {
  sqls_ = NULL;
  _cached_size_ = 0;
}

ChangeIdxNameArg::~ChangeIdxNameArg() {
  // @@protoc_insertion_point(destructor:clickhouse.ChangeIdxNameArg)
  SharedDtor();
}

void ChangeIdxNameArg::SharedDtor() {
  if (this != internal_default_instance()) delete sqls_;
}

void ChangeIdxNameArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeIdxNameArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeIdxNameArg& ChangeIdxNameArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsChangeIdxNameArg();
  return *internal_default_instance();
}

ChangeIdxNameArg* ChangeIdxNameArg::New(::google::protobuf::Arena* arena) const {
  ChangeIdxNameArg* n = new ChangeIdxNameArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeIdxNameArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.ChangeIdxNameArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sqls_ != NULL) {
    delete sqls_;
  }
  sqls_ = NULL;
  _internal_metadata_.Clear();
}

bool ChangeIdxNameArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.ChangeIdxNameArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.SqlCommonInfo sqls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sqls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.ChangeIdxNameArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.ChangeIdxNameArg)
  return false;
#undef DO_
}

void ChangeIdxNameArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.ChangeIdxNameArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sqls_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.ChangeIdxNameArg)
}

::google::protobuf::uint8* ChangeIdxNameArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.ChangeIdxNameArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sqls_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.ChangeIdxNameArg)
  return target;
}

size_t ChangeIdxNameArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.ChangeIdxNameArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sqls_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeIdxNameArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.ChangeIdxNameArg)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeIdxNameArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeIdxNameArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.ChangeIdxNameArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.ChangeIdxNameArg)
    MergeFrom(*source);
  }
}

void ChangeIdxNameArg::MergeFrom(const ChangeIdxNameArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.ChangeIdxNameArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sqls()) {
    mutable_sqls()->::clickhouse::SqlCommonInfo::MergeFrom(from.sqls());
  }
}

void ChangeIdxNameArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.ChangeIdxNameArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeIdxNameArg::CopyFrom(const ChangeIdxNameArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.ChangeIdxNameArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeIdxNameArg::IsInitialized() const {
  return true;
}

void ChangeIdxNameArg::Swap(ChangeIdxNameArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeIdxNameArg::InternalSwap(ChangeIdxNameArg* other) {
  using std::swap;
  swap(sqls_, other->sqls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeIdxNameArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddIdxArg::InitAsDefaultInstance() {
  ::clickhouse::_AddIdxArg_default_instance_._instance.get_mutable()->sqls_ = const_cast< ::clickhouse::SqlCommonInfo*>(
      ::clickhouse::SqlCommonInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddIdxArg::kSqlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddIdxArg::AddIdxArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsAddIdxArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.AddIdxArg)
}
AddIdxArg::AddIdxArg(const AddIdxArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sqls()) {
    sqls_ = new ::clickhouse::SqlCommonInfo(*from.sqls_);
  } else {
    sqls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.AddIdxArg)
}

void AddIdxArg::SharedCtor() {
  sqls_ = NULL;
  _cached_size_ = 0;
}

AddIdxArg::~AddIdxArg() {
  // @@protoc_insertion_point(destructor:clickhouse.AddIdxArg)
  SharedDtor();
}

void AddIdxArg::SharedDtor() {
  if (this != internal_default_instance()) delete sqls_;
}

void AddIdxArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddIdxArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddIdxArg& AddIdxArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsAddIdxArg();
  return *internal_default_instance();
}

AddIdxArg* AddIdxArg::New(::google::protobuf::Arena* arena) const {
  AddIdxArg* n = new AddIdxArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddIdxArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.AddIdxArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sqls_ != NULL) {
    delete sqls_;
  }
  sqls_ = NULL;
  _internal_metadata_.Clear();
}

bool AddIdxArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.AddIdxArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.SqlCommonInfo sqls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sqls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.AddIdxArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.AddIdxArg)
  return false;
#undef DO_
}

void AddIdxArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.AddIdxArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sqls_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.AddIdxArg)
}

::google::protobuf::uint8* AddIdxArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.AddIdxArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sqls_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.AddIdxArg)
  return target;
}

size_t AddIdxArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.AddIdxArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sqls_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddIdxArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.AddIdxArg)
  GOOGLE_DCHECK_NE(&from, this);
  const AddIdxArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddIdxArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.AddIdxArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.AddIdxArg)
    MergeFrom(*source);
  }
}

void AddIdxArg::MergeFrom(const AddIdxArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.AddIdxArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sqls()) {
    mutable_sqls()->::clickhouse::SqlCommonInfo::MergeFrom(from.sqls());
  }
}

void AddIdxArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.AddIdxArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddIdxArg::CopyFrom(const AddIdxArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.AddIdxArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddIdxArg::IsInitialized() const {
  return true;
}

void AddIdxArg::Swap(AddIdxArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddIdxArg::InternalSwap(AddIdxArg* other) {
  using std::swap;
  swap(sqls_, other->sqls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddIdxArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DropIdxArg::InitAsDefaultInstance() {
  ::clickhouse::_DropIdxArg_default_instance_._instance.get_mutable()->sqls_ = const_cast< ::clickhouse::SqlCommonInfo*>(
      ::clickhouse::SqlCommonInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropIdxArg::kSqlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropIdxArg::DropIdxArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsDropIdxArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.DropIdxArg)
}
DropIdxArg::DropIdxArg(const DropIdxArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sqls()) {
    sqls_ = new ::clickhouse::SqlCommonInfo(*from.sqls_);
  } else {
    sqls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.DropIdxArg)
}

void DropIdxArg::SharedCtor() {
  sqls_ = NULL;
  _cached_size_ = 0;
}

DropIdxArg::~DropIdxArg() {
  // @@protoc_insertion_point(destructor:clickhouse.DropIdxArg)
  SharedDtor();
}

void DropIdxArg::SharedDtor() {
  if (this != internal_default_instance()) delete sqls_;
}

void DropIdxArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropIdxArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DropIdxArg& DropIdxArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsDropIdxArg();
  return *internal_default_instance();
}

DropIdxArg* DropIdxArg::New(::google::protobuf::Arena* arena) const {
  DropIdxArg* n = new DropIdxArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropIdxArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.DropIdxArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sqls_ != NULL) {
    delete sqls_;
  }
  sqls_ = NULL;
  _internal_metadata_.Clear();
}

bool DropIdxArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.DropIdxArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.SqlCommonInfo sqls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sqls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.DropIdxArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.DropIdxArg)
  return false;
#undef DO_
}

void DropIdxArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.DropIdxArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sqls_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.DropIdxArg)
}

::google::protobuf::uint8* DropIdxArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.DropIdxArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sqls_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.DropIdxArg)
  return target;
}

size_t DropIdxArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.DropIdxArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sqls_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropIdxArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.DropIdxArg)
  GOOGLE_DCHECK_NE(&from, this);
  const DropIdxArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropIdxArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.DropIdxArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.DropIdxArg)
    MergeFrom(*source);
  }
}

void DropIdxArg::MergeFrom(const DropIdxArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.DropIdxArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sqls()) {
    mutable_sqls()->::clickhouse::SqlCommonInfo::MergeFrom(from.sqls());
  }
}

void DropIdxArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.DropIdxArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropIdxArg::CopyFrom(const DropIdxArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.DropIdxArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropIdxArg::IsInitialized() const {
  return true;
}

void DropIdxArg::Swap(DropIdxArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropIdxArg::InternalSwap(DropIdxArg* other) {
  using std::swap;
  swap(sqls_, other->sqls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropIdxArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShardDeleteArg::InitAsDefaultInstance() {
  ::clickhouse::_ShardDeleteArg_default_instance_._instance.get_mutable()->sqls_ = const_cast< ::clickhouse::SqlCommonInfo*>(
      ::clickhouse::SqlCommonInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShardDeleteArg::kSqlsFieldNumber;
const int ShardDeleteArg::kTxnIdFieldNumber;
const int ShardDeleteArg::kSuccessNodeCntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShardDeleteArg::ShardDeleteArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsShardDeleteArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.ShardDeleteArg)
}
ShardDeleteArg::ShardDeleteArg(const ShardDeleteArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.has_sqls()) {
    sqls_ = new ::clickhouse::SqlCommonInfo(*from.sqls_);
  } else {
    sqls_ = NULL;
  }
  success_node_cnt_ = from.success_node_cnt_;
  // @@protoc_insertion_point(copy_constructor:clickhouse.ShardDeleteArg)
}

void ShardDeleteArg::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sqls_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_node_cnt_) -
      reinterpret_cast<char*>(&sqls_)) + sizeof(success_node_cnt_));
  _cached_size_ = 0;
}

ShardDeleteArg::~ShardDeleteArg() {
  // @@protoc_insertion_point(destructor:clickhouse.ShardDeleteArg)
  SharedDtor();
}

void ShardDeleteArg::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sqls_;
}

void ShardDeleteArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardDeleteArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShardDeleteArg& ShardDeleteArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsShardDeleteArg();
  return *internal_default_instance();
}

ShardDeleteArg* ShardDeleteArg::New(::google::protobuf::Arena* arena) const {
  ShardDeleteArg* n = new ShardDeleteArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShardDeleteArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.ShardDeleteArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sqls_ != NULL) {
    delete sqls_;
  }
  sqls_ = NULL;
  success_node_cnt_ = 0;
  _internal_metadata_.Clear();
}

bool ShardDeleteArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.ShardDeleteArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.SqlCommonInfo sqls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sqls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string txn_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.ShardDeleteArg.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 success_node_cnt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_node_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.ShardDeleteArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.ShardDeleteArg)
  return false;
#undef DO_
}

void ShardDeleteArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.ShardDeleteArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sqls_, output);
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardDeleteArg.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->txn_id(), output);
  }

  // int32 success_node_cnt = 3;
  if (this->success_node_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->success_node_cnt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.ShardDeleteArg)
}

::google::protobuf::uint8* ShardDeleteArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.ShardDeleteArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sqls_, deterministic, target);
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardDeleteArg.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->txn_id(), target);
  }

  // int32 success_node_cnt = 3;
  if (this->success_node_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->success_node_cnt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.ShardDeleteArg)
  return target;
}

size_t ShardDeleteArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.ShardDeleteArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sqls_);
  }

  // int32 success_node_cnt = 3;
  if (this->success_node_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->success_node_cnt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardDeleteArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.ShardDeleteArg)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardDeleteArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShardDeleteArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.ShardDeleteArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.ShardDeleteArg)
    MergeFrom(*source);
  }
}

void ShardDeleteArg::MergeFrom(const ShardDeleteArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.ShardDeleteArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.has_sqls()) {
    mutable_sqls()->::clickhouse::SqlCommonInfo::MergeFrom(from.sqls());
  }
  if (from.success_node_cnt() != 0) {
    set_success_node_cnt(from.success_node_cnt());
  }
}

void ShardDeleteArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.ShardDeleteArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardDeleteArg::CopyFrom(const ShardDeleteArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.ShardDeleteArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardDeleteArg::IsInitialized() const {
  return true;
}

void ShardDeleteArg::Swap(ShardDeleteArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShardDeleteArg::InternalSwap(ShardDeleteArg* other) {
  using std::swap;
  txn_id_.Swap(&other->txn_id_);
  swap(sqls_, other->sqls_);
  swap(success_node_cnt_, other->success_node_cnt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShardDeleteArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShardDeleteResult::InitAsDefaultInstance() {
  ::clickhouse::_ShardDeleteResult_default_instance_._instance.get_mutable()->result_ = const_cast< ::clickhouse::BoolResult*>(
      ::clickhouse::BoolResult::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShardDeleteResult::kResultFieldNumber;
const int ShardDeleteResult::kShardIdsFieldNumber;
const int ShardDeleteResult::kDeletedRowCntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShardDeleteResult::ShardDeleteResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsShardDeleteResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.ShardDeleteResult)
}
ShardDeleteResult::ShardDeleteResult(const ShardDeleteResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shard_ids_(from.shard_ids_),
      deleted_row_cnt_(from.deleted_row_cnt_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::clickhouse::BoolResult(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.ShardDeleteResult)
}

void ShardDeleteResult::SharedCtor() {
  result_ = NULL;
  _cached_size_ = 0;
}

ShardDeleteResult::~ShardDeleteResult() {
  // @@protoc_insertion_point(destructor:clickhouse.ShardDeleteResult)
  SharedDtor();
}

void ShardDeleteResult::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void ShardDeleteResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardDeleteResult::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShardDeleteResult& ShardDeleteResult::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsShardDeleteResult();
  return *internal_default_instance();
}

ShardDeleteResult* ShardDeleteResult::New(::google::protobuf::Arena* arena) const {
  ShardDeleteResult* n = new ShardDeleteResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShardDeleteResult::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.ShardDeleteResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shard_ids_.Clear();
  deleted_row_cnt_.Clear();
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
  _internal_metadata_.Clear();
}

bool ShardDeleteResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.ShardDeleteResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.BoolResult result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string shard_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_shard_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shard_ids(this->shard_ids_size() - 1).data(),
            static_cast<int>(this->shard_ids(this->shard_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.ShardDeleteResult.shard_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 deleted_row_cnt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_deleted_row_cnt())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_deleted_row_cnt())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.ShardDeleteResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.ShardDeleteResult)
  return false;
#undef DO_
}

void ShardDeleteResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.ShardDeleteResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.BoolResult result = 1;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  // repeated string shard_ids = 2;
  for (int i = 0, n = this->shard_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_ids(i).data(), static_cast<int>(this->shard_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardDeleteResult.shard_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->shard_ids(i), output);
  }

  // repeated int64 deleted_row_cnt = 3;
  if (this->deleted_row_cnt_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _deleted_row_cnt_cached_byte_size_));
  }
  for (int i = 0, n = this->deleted_row_cnt_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->deleted_row_cnt(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.ShardDeleteResult)
}

::google::protobuf::uint8* ShardDeleteResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.ShardDeleteResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.BoolResult result = 1;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->result_, deterministic, target);
  }

  // repeated string shard_ids = 2;
  for (int i = 0, n = this->shard_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_ids(i).data(), static_cast<int>(this->shard_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardDeleteResult.shard_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->shard_ids(i), target);
  }

  // repeated int64 deleted_row_cnt = 3;
  if (this->deleted_row_cnt_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _deleted_row_cnt_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->deleted_row_cnt_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.ShardDeleteResult)
  return target;
}

size_t ShardDeleteResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.ShardDeleteResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string shard_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->shard_ids_size());
  for (int i = 0, n = this->shard_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->shard_ids(i));
  }

  // repeated int64 deleted_row_cnt = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->deleted_row_cnt_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _deleted_row_cnt_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .clickhouse.BoolResult result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardDeleteResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.ShardDeleteResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardDeleteResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShardDeleteResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.ShardDeleteResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.ShardDeleteResult)
    MergeFrom(*source);
  }
}

void ShardDeleteResult::MergeFrom(const ShardDeleteResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.ShardDeleteResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shard_ids_.MergeFrom(from.shard_ids_);
  deleted_row_cnt_.MergeFrom(from.deleted_row_cnt_);
  if (from.has_result()) {
    mutable_result()->::clickhouse::BoolResult::MergeFrom(from.result());
  }
}

void ShardDeleteResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.ShardDeleteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardDeleteResult::CopyFrom(const ShardDeleteResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.ShardDeleteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardDeleteResult::IsInitialized() const {
  return true;
}

void ShardDeleteResult::Swap(ShardDeleteResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShardDeleteResult::InternalSwap(ShardDeleteResult* other) {
  using std::swap;
  shard_ids_.InternalSwap(&other->shard_ids_);
  deleted_row_cnt_.InternalSwap(&other->deleted_row_cnt_);
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShardDeleteResult::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShardUpdateArg::InitAsDefaultInstance() {
  ::clickhouse::_ShardUpdateArg_default_instance_._instance.get_mutable()->sqls_ = const_cast< ::clickhouse::SqlCommonInfo*>(
      ::clickhouse::SqlCommonInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShardUpdateArg::kSqlsFieldNumber;
const int ShardUpdateArg::kTxnIdFieldNumber;
const int ShardUpdateArg::kSuccessNodeCntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShardUpdateArg::ShardUpdateArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsShardUpdateArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.ShardUpdateArg)
}
ShardUpdateArg::ShardUpdateArg(const ShardUpdateArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.has_sqls()) {
    sqls_ = new ::clickhouse::SqlCommonInfo(*from.sqls_);
  } else {
    sqls_ = NULL;
  }
  success_node_cnt_ = from.success_node_cnt_;
  // @@protoc_insertion_point(copy_constructor:clickhouse.ShardUpdateArg)
}

void ShardUpdateArg::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sqls_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_node_cnt_) -
      reinterpret_cast<char*>(&sqls_)) + sizeof(success_node_cnt_));
  _cached_size_ = 0;
}

ShardUpdateArg::~ShardUpdateArg() {
  // @@protoc_insertion_point(destructor:clickhouse.ShardUpdateArg)
  SharedDtor();
}

void ShardUpdateArg::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sqls_;
}

void ShardUpdateArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardUpdateArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShardUpdateArg& ShardUpdateArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsShardUpdateArg();
  return *internal_default_instance();
}

ShardUpdateArg* ShardUpdateArg::New(::google::protobuf::Arena* arena) const {
  ShardUpdateArg* n = new ShardUpdateArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShardUpdateArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.ShardUpdateArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sqls_ != NULL) {
    delete sqls_;
  }
  sqls_ = NULL;
  success_node_cnt_ = 0;
  _internal_metadata_.Clear();
}

bool ShardUpdateArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.ShardUpdateArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.SqlCommonInfo sqls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sqls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string txn_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.ShardUpdateArg.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 success_node_cnt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_node_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.ShardUpdateArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.ShardUpdateArg)
  return false;
#undef DO_
}

void ShardUpdateArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.ShardUpdateArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sqls_, output);
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardUpdateArg.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->txn_id(), output);
  }

  // int32 success_node_cnt = 3;
  if (this->success_node_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->success_node_cnt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.ShardUpdateArg)
}

::google::protobuf::uint8* ShardUpdateArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.ShardUpdateArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sqls_, deterministic, target);
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardUpdateArg.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->txn_id(), target);
  }

  // int32 success_node_cnt = 3;
  if (this->success_node_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->success_node_cnt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.ShardUpdateArg)
  return target;
}

size_t ShardUpdateArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.ShardUpdateArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sqls_);
  }

  // int32 success_node_cnt = 3;
  if (this->success_node_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->success_node_cnt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardUpdateArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.ShardUpdateArg)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardUpdateArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShardUpdateArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.ShardUpdateArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.ShardUpdateArg)
    MergeFrom(*source);
  }
}

void ShardUpdateArg::MergeFrom(const ShardUpdateArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.ShardUpdateArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.has_sqls()) {
    mutable_sqls()->::clickhouse::SqlCommonInfo::MergeFrom(from.sqls());
  }
  if (from.success_node_cnt() != 0) {
    set_success_node_cnt(from.success_node_cnt());
  }
}

void ShardUpdateArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.ShardUpdateArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardUpdateArg::CopyFrom(const ShardUpdateArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.ShardUpdateArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardUpdateArg::IsInitialized() const {
  return true;
}

void ShardUpdateArg::Swap(ShardUpdateArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShardUpdateArg::InternalSwap(ShardUpdateArg* other) {
  using std::swap;
  txn_id_.Swap(&other->txn_id_);
  swap(sqls_, other->sqls_);
  swap(success_node_cnt_, other->success_node_cnt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShardUpdateArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShardUpdateResult::InitAsDefaultInstance() {
  ::clickhouse::_ShardUpdateResult_default_instance_._instance.get_mutable()->result_ = const_cast< ::clickhouse::BoolResult*>(
      ::clickhouse::BoolResult::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShardUpdateResult::kResultFieldNumber;
const int ShardUpdateResult::kShardIdsFieldNumber;
const int ShardUpdateResult::kDeletedRowCntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShardUpdateResult::ShardUpdateResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsShardUpdateResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.ShardUpdateResult)
}
ShardUpdateResult::ShardUpdateResult(const ShardUpdateResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shard_ids_(from.shard_ids_),
      deleted_row_cnt_(from.deleted_row_cnt_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::clickhouse::BoolResult(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.ShardUpdateResult)
}

void ShardUpdateResult::SharedCtor() {
  result_ = NULL;
  _cached_size_ = 0;
}

ShardUpdateResult::~ShardUpdateResult() {
  // @@protoc_insertion_point(destructor:clickhouse.ShardUpdateResult)
  SharedDtor();
}

void ShardUpdateResult::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void ShardUpdateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardUpdateResult::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShardUpdateResult& ShardUpdateResult::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsShardUpdateResult();
  return *internal_default_instance();
}

ShardUpdateResult* ShardUpdateResult::New(::google::protobuf::Arena* arena) const {
  ShardUpdateResult* n = new ShardUpdateResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShardUpdateResult::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.ShardUpdateResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shard_ids_.Clear();
  deleted_row_cnt_.Clear();
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
  _internal_metadata_.Clear();
}

bool ShardUpdateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.ShardUpdateResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.BoolResult result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string shard_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_shard_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shard_ids(this->shard_ids_size() - 1).data(),
            static_cast<int>(this->shard_ids(this->shard_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.ShardUpdateResult.shard_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 deleted_row_cnt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_deleted_row_cnt())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_deleted_row_cnt())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.ShardUpdateResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.ShardUpdateResult)
  return false;
#undef DO_
}

void ShardUpdateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.ShardUpdateResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.BoolResult result = 1;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  // repeated string shard_ids = 2;
  for (int i = 0, n = this->shard_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_ids(i).data(), static_cast<int>(this->shard_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardUpdateResult.shard_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->shard_ids(i), output);
  }

  // repeated int64 deleted_row_cnt = 3;
  if (this->deleted_row_cnt_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _deleted_row_cnt_cached_byte_size_));
  }
  for (int i = 0, n = this->deleted_row_cnt_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->deleted_row_cnt(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.ShardUpdateResult)
}

::google::protobuf::uint8* ShardUpdateResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.ShardUpdateResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.BoolResult result = 1;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->result_, deterministic, target);
  }

  // repeated string shard_ids = 2;
  for (int i = 0, n = this->shard_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_ids(i).data(), static_cast<int>(this->shard_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardUpdateResult.shard_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->shard_ids(i), target);
  }

  // repeated int64 deleted_row_cnt = 3;
  if (this->deleted_row_cnt_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _deleted_row_cnt_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->deleted_row_cnt_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.ShardUpdateResult)
  return target;
}

size_t ShardUpdateResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.ShardUpdateResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string shard_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->shard_ids_size());
  for (int i = 0, n = this->shard_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->shard_ids(i));
  }

  // repeated int64 deleted_row_cnt = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->deleted_row_cnt_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _deleted_row_cnt_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .clickhouse.BoolResult result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardUpdateResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.ShardUpdateResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardUpdateResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShardUpdateResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.ShardUpdateResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.ShardUpdateResult)
    MergeFrom(*source);
  }
}

void ShardUpdateResult::MergeFrom(const ShardUpdateResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.ShardUpdateResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shard_ids_.MergeFrom(from.shard_ids_);
  deleted_row_cnt_.MergeFrom(from.deleted_row_cnt_);
  if (from.has_result()) {
    mutable_result()->::clickhouse::BoolResult::MergeFrom(from.result());
  }
}

void ShardUpdateResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.ShardUpdateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardUpdateResult::CopyFrom(const ShardUpdateResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.ShardUpdateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardUpdateResult::IsInitialized() const {
  return true;
}

void ShardUpdateResult::Swap(ShardUpdateResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShardUpdateResult::InternalSwap(ShardUpdateResult* other) {
  using std::swap;
  shard_ids_.InternalSwap(&other->shard_ids_);
  deleted_row_cnt_.InternalSwap(&other->deleted_row_cnt_);
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShardUpdateResult::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShardInsertArg::InitAsDefaultInstance() {
  ::clickhouse::_ShardInsertArg_default_instance_._instance.get_mutable()->sqls_ = const_cast< ::clickhouse::SqlCommonInfo*>(
      ::clickhouse::SqlCommonInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShardInsertArg::kSqlsFieldNumber;
const int ShardInsertArg::kTxnIdFieldNumber;
const int ShardInsertArg::kRowCntFieldNumber;
const int ShardInsertArg::kColValuesListFieldNumber;
const int ShardInsertArg::kSuccessNodeCntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShardInsertArg::ShardInsertArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsShardInsertArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.ShardInsertArg)
}
ShardInsertArg::ShardInsertArg(const ShardInsertArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      col_values_list_(from.col_values_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.has_sqls()) {
    sqls_ = new ::clickhouse::SqlCommonInfo(*from.sqls_);
  } else {
    sqls_ = NULL;
  }
  ::memcpy(&row_cnt_, &from.row_cnt_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_node_cnt_) -
    reinterpret_cast<char*>(&row_cnt_)) + sizeof(success_node_cnt_));
  // @@protoc_insertion_point(copy_constructor:clickhouse.ShardInsertArg)
}

void ShardInsertArg::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sqls_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_node_cnt_) -
      reinterpret_cast<char*>(&sqls_)) + sizeof(success_node_cnt_));
  _cached_size_ = 0;
}

ShardInsertArg::~ShardInsertArg() {
  // @@protoc_insertion_point(destructor:clickhouse.ShardInsertArg)
  SharedDtor();
}

void ShardInsertArg::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sqls_;
}

void ShardInsertArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardInsertArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShardInsertArg& ShardInsertArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsShardInsertArg();
  return *internal_default_instance();
}

ShardInsertArg* ShardInsertArg::New(::google::protobuf::Arena* arena) const {
  ShardInsertArg* n = new ShardInsertArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShardInsertArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.ShardInsertArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  col_values_list_.Clear();
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sqls_ != NULL) {
    delete sqls_;
  }
  sqls_ = NULL;
  ::memset(&row_cnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_node_cnt_) -
      reinterpret_cast<char*>(&row_cnt_)) + sizeof(success_node_cnt_));
  _internal_metadata_.Clear();
}

bool ShardInsertArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.ShardInsertArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.SqlCommonInfo sqls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sqls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string txn_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.ShardInsertArg.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 row_cnt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .clickhouse.ColValues col_values_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_col_values_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 success_node_cnt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_node_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.ShardInsertArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.ShardInsertArg)
  return false;
#undef DO_
}

void ShardInsertArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.ShardInsertArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sqls_, output);
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardInsertArg.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->txn_id(), output);
  }

  // int32 row_cnt = 3;
  if (this->row_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->row_cnt(), output);
  }

  // repeated .clickhouse.ColValues col_values_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->col_values_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->col_values_list(static_cast<int>(i)), output);
  }

  // int32 success_node_cnt = 5;
  if (this->success_node_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->success_node_cnt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.ShardInsertArg)
}

::google::protobuf::uint8* ShardInsertArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.ShardInsertArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sqls_, deterministic, target);
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardInsertArg.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->txn_id(), target);
  }

  // int32 row_cnt = 3;
  if (this->row_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->row_cnt(), target);
  }

  // repeated .clickhouse.ColValues col_values_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->col_values_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->col_values_list(static_cast<int>(i)), deterministic, target);
  }

  // int32 success_node_cnt = 5;
  if (this->success_node_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->success_node_cnt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.ShardInsertArg)
  return target;
}

size_t ShardInsertArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.ShardInsertArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .clickhouse.ColValues col_values_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->col_values_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->col_values_list(static_cast<int>(i)));
    }
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // .clickhouse.SqlCommonInfo sqls = 1;
  if (this->has_sqls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sqls_);
  }

  // int32 row_cnt = 3;
  if (this->row_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row_cnt());
  }

  // int32 success_node_cnt = 5;
  if (this->success_node_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->success_node_cnt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardInsertArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.ShardInsertArg)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardInsertArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShardInsertArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.ShardInsertArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.ShardInsertArg)
    MergeFrom(*source);
  }
}

void ShardInsertArg::MergeFrom(const ShardInsertArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.ShardInsertArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  col_values_list_.MergeFrom(from.col_values_list_);
  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.has_sqls()) {
    mutable_sqls()->::clickhouse::SqlCommonInfo::MergeFrom(from.sqls());
  }
  if (from.row_cnt() != 0) {
    set_row_cnt(from.row_cnt());
  }
  if (from.success_node_cnt() != 0) {
    set_success_node_cnt(from.success_node_cnt());
  }
}

void ShardInsertArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.ShardInsertArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardInsertArg::CopyFrom(const ShardInsertArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.ShardInsertArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardInsertArg::IsInitialized() const {
  return true;
}

void ShardInsertArg::Swap(ShardInsertArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShardInsertArg::InternalSwap(ShardInsertArg* other) {
  using std::swap;
  col_values_list_.InternalSwap(&other->col_values_list_);
  txn_id_.Swap(&other->txn_id_);
  swap(sqls_, other->sqls_);
  swap(row_cnt_, other->row_cnt_);
  swap(success_node_cnt_, other->success_node_cnt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShardInsertArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ColValues::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColValues::kTypeFieldNumber;
const int ColValues::kTypeModFieldNumber;
const int ColValues::kNullBmpFieldNumber;
const int ColValues::kDataListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColValues::ColValues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsColValues();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.ColValues)
}
ColValues::ColValues(const ColValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_list_(from.data_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  null_bmp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.null_bmp().size() > 0) {
    null_bmp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.null_bmp_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_mod_) -
    reinterpret_cast<char*>(&type_)) + sizeof(type_mod_));
  // @@protoc_insertion_point(copy_constructor:clickhouse.ColValues)
}

void ColValues::SharedCtor() {
  null_bmp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_mod_) -
      reinterpret_cast<char*>(&type_)) + sizeof(type_mod_));
  _cached_size_ = 0;
}

ColValues::~ColValues() {
  // @@protoc_insertion_point(destructor:clickhouse.ColValues)
  SharedDtor();
}

void ColValues::SharedDtor() {
  null_bmp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ColValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColValues::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ColValues& ColValues::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsColValues();
  return *internal_default_instance();
}

ColValues* ColValues::New(::google::protobuf::Arena* arena) const {
  ColValues* n = new ColValues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColValues::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.ColValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_list_.Clear();
  null_bmp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_mod_) -
      reinterpret_cast<char*>(&type_)) + sizeof(type_mod_));
  _internal_metadata_.Clear();
}

bool ColValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.ColValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type_mod = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_mod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes null_bmp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_null_bmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes data_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.ColValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.ColValues)
  return false;
#undef DO_
}

void ColValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.ColValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // int32 type_mod = 2;
  if (this->type_mod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_mod(), output);
  }

  // bytes null_bmp = 3;
  if (this->null_bmp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->null_bmp(), output);
  }

  // repeated bytes data_list = 4;
  for (int i = 0, n = this->data_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.ColValues)
}

::google::protobuf::uint8* ColValues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.ColValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // int32 type_mod = 2;
  if (this->type_mod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_mod(), target);
  }

  // bytes null_bmp = 3;
  if (this->null_bmp().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->null_bmp(), target);
  }

  // repeated bytes data_list = 4;
  for (int i = 0, n = this->data_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->data_list(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.ColValues)
  return target;
}

size_t ColValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.ColValues)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes data_list = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->data_list_size());
  for (int i = 0, n = this->data_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data_list(i));
  }

  // bytes null_bmp = 3;
  if (this->null_bmp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->null_bmp());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 type_mod = 2;
  if (this->type_mod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type_mod());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.ColValues)
  GOOGLE_DCHECK_NE(&from, this);
  const ColValues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColValues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.ColValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.ColValues)
    MergeFrom(*source);
  }
}

void ColValues::MergeFrom(const ColValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.ColValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_list_.MergeFrom(from.data_list_);
  if (from.null_bmp().size() > 0) {

    null_bmp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.null_bmp_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.type_mod() != 0) {
    set_type_mod(from.type_mod());
  }
}

void ColValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.ColValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColValues::CopyFrom(const ColValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.ColValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColValues::IsInitialized() const {
  return true;
}

void ColValues::Swap(ColValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColValues::InternalSwap(ColValues* other) {
  using std::swap;
  data_list_.InternalSwap(&other->data_list_);
  null_bmp_.Swap(&other->null_bmp_);
  swap(type_, other->type_);
  swap(type_mod_, other->type_mod_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColValues::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocatedShard::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocatedShard::kStorageNodeIdFieldNumber;
const int LocatedShard::kHostFieldNumber;
const int LocatedShard::kGrpcPortFieldNumber;
const int LocatedShard::kRackFieldNumber;
const int LocatedShard::kZoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocatedShard::LocatedShard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsLocatedShard();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.LocatedShard)
}
LocatedShard::LocatedShard(const LocatedShard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  storagenodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.storagenodeid().size() > 0) {
    storagenodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storagenodeid_);
  }
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  rack_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rack().size() > 0) {
    rack_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rack_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  grpcport_ = from.grpcport_;
  // @@protoc_insertion_point(copy_constructor:clickhouse.LocatedShard)
}

void LocatedShard::SharedCtor() {
  storagenodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rack_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grpcport_ = 0;
  _cached_size_ = 0;
}

LocatedShard::~LocatedShard() {
  // @@protoc_insertion_point(destructor:clickhouse.LocatedShard)
  SharedDtor();
}

void LocatedShard::SharedDtor() {
  storagenodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rack_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LocatedShard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocatedShard::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocatedShard& LocatedShard::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsLocatedShard();
  return *internal_default_instance();
}

LocatedShard* LocatedShard::New(::google::protobuf::Arena* arena) const {
  LocatedShard* n = new LocatedShard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocatedShard::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.LocatedShard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  storagenodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rack_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grpcport_ = 0;
  _internal_metadata_.Clear();
}

bool LocatedShard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.LocatedShard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string storageNodeId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storagenodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->storagenodeid().data(), static_cast<int>(this->storagenodeid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.LocatedShard.storageNodeId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.LocatedShard.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 grpcPort = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grpcport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rack = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rack()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rack().data(), static_cast<int>(this->rack().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.LocatedShard.rack"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), static_cast<int>(this->zone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.LocatedShard.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.LocatedShard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.LocatedShard)
  return false;
#undef DO_
}

void LocatedShard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.LocatedShard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string storageNodeId = 1;
  if (this->storagenodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->storagenodeid().data(), static_cast<int>(this->storagenodeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.LocatedShard.storageNodeId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->storagenodeid(), output);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.LocatedShard.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host(), output);
  }

  // int32 grpcPort = 3;
  if (this->grpcport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grpcport(), output);
  }

  // string rack = 4;
  if (this->rack().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rack().data(), static_cast<int>(this->rack().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.LocatedShard.rack");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rack(), output);
  }

  // string zone = 5;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), static_cast<int>(this->zone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.LocatedShard.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->zone(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.LocatedShard)
}

::google::protobuf::uint8* LocatedShard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.LocatedShard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string storageNodeId = 1;
  if (this->storagenodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->storagenodeid().data(), static_cast<int>(this->storagenodeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.LocatedShard.storageNodeId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->storagenodeid(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.LocatedShard.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }

  // int32 grpcPort = 3;
  if (this->grpcport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grpcport(), target);
  }

  // string rack = 4;
  if (this->rack().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rack().data(), static_cast<int>(this->rack().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.LocatedShard.rack");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rack(), target);
  }

  // string zone = 5;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), static_cast<int>(this->zone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.LocatedShard.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->zone(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.LocatedShard)
  return target;
}

size_t LocatedShard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.LocatedShard)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string storageNodeId = 1;
  if (this->storagenodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->storagenodeid());
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string rack = 4;
  if (this->rack().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rack());
  }

  // string zone = 5;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // int32 grpcPort = 3;
  if (this->grpcport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->grpcport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocatedShard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.LocatedShard)
  GOOGLE_DCHECK_NE(&from, this);
  const LocatedShard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocatedShard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.LocatedShard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.LocatedShard)
    MergeFrom(*source);
  }
}

void LocatedShard::MergeFrom(const LocatedShard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.LocatedShard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.storagenodeid().size() > 0) {

    storagenodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storagenodeid_);
  }
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.rack().size() > 0) {

    rack_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rack_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.grpcport() != 0) {
    set_grpcport(from.grpcport());
  }
}

void LocatedShard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.LocatedShard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocatedShard::CopyFrom(const LocatedShard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.LocatedShard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocatedShard::IsInitialized() const {
  return true;
}

void LocatedShard::Swap(LocatedShard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocatedShard::InternalSwap(LocatedShard* other) {
  using std::swap;
  storagenodeid_.Swap(&other->storagenodeid_);
  host_.Swap(&other->host_);
  rack_.Swap(&other->rack_);
  zone_.Swap(&other->zone_);
  swap(grpcport_, other->grpcport_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocatedShard::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Shard::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shard::kTableNameFieldNumber;
const int Shard::kShardIdFieldNumber;
const int Shard::kLocsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shard::Shard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsShard();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.Shard)
}
Shard::Shard(const Shard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      locs_(from.locs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  shard_id_ = from.shard_id_;
  // @@protoc_insertion_point(copy_constructor:clickhouse.Shard)
}

void Shard::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shard_id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Shard::~Shard() {
  // @@protoc_insertion_point(destructor:clickhouse.Shard)
  SharedDtor();
}

void Shard::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Shard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shard::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Shard& Shard::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsShard();
  return *internal_default_instance();
}

Shard* Shard::New(::google::protobuf::Arena* arena) const {
  Shard* n = new Shard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Shard::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.Shard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locs_.Clear();
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shard_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool Shard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.Shard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.Shard.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 shard_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shard_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .clickhouse.LocatedShard locs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_locs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.Shard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.Shard)
  return false;
#undef DO_
}

void Shard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.Shard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.Shard.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // int64 shard_id = 2;
  if (this->shard_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->shard_id(), output);
  }

  // repeated .clickhouse.LocatedShard locs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->locs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->locs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.Shard)
}

::google::protobuf::uint8* Shard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.Shard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.Shard.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // int64 shard_id = 2;
  if (this->shard_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->shard_id(), target);
  }

  // repeated .clickhouse.LocatedShard locs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->locs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->locs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.Shard)
  return target;
}

size_t Shard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.Shard)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .clickhouse.LocatedShard locs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->locs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->locs(static_cast<int>(i)));
    }
  }

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // int64 shard_id = 2;
  if (this->shard_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->shard_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.Shard)
  GOOGLE_DCHECK_NE(&from, this);
  const Shard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Shard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.Shard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.Shard)
    MergeFrom(*source);
  }
}

void Shard::MergeFrom(const Shard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.Shard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locs_.MergeFrom(from.locs_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.shard_id() != 0) {
    set_shard_id(from.shard_id());
  }
}

void Shard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.Shard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shard::CopyFrom(const Shard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.Shard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shard::IsInitialized() const {
  return true;
}

void Shard::Swap(Shard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shard::InternalSwap(Shard* other) {
  using std::swap;
  locs_.InternalSwap(&other->locs_);
  table_name_.Swap(&other->table_name_);
  swap(shard_id_, other->shard_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Shard::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShardReadShardArg::InitAsDefaultInstance() {
  ::clickhouse::_ShardReadShardArg_default_instance_._instance.get_mutable()->shard_arg_ = const_cast< ::clickhouse::ShardArg*>(
      ::clickhouse::ShardArg::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShardReadShardArg::kShardArgFieldNumber;
const int ShardReadShardArg::kSnapshotIdFieldNumber;
const int ShardReadShardArg::kSqlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShardReadShardArg::ShardReadShardArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsShardReadShardArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.ShardReadShardArg)
}
ShardReadShardArg::ShardReadShardArg(const ShardReadShardArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.snapshot_id().size() > 0) {
    snapshot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_id_);
  }
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sql().size() > 0) {
    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  if (from.has_shard_arg()) {
    shard_arg_ = new ::clickhouse::ShardArg(*from.shard_arg_);
  } else {
    shard_arg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.ShardReadShardArg)
}

void ShardReadShardArg::SharedCtor() {
  snapshot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shard_arg_ = NULL;
  _cached_size_ = 0;
}

ShardReadShardArg::~ShardReadShardArg() {
  // @@protoc_insertion_point(destructor:clickhouse.ShardReadShardArg)
  SharedDtor();
}

void ShardReadShardArg::SharedDtor() {
  snapshot_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sql_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shard_arg_;
}

void ShardReadShardArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardReadShardArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShardReadShardArg& ShardReadShardArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsShardReadShardArg();
  return *internal_default_instance();
}

ShardReadShardArg* ShardReadShardArg::New(::google::protobuf::Arena* arena) const {
  ShardReadShardArg* n = new ShardReadShardArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShardReadShardArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.ShardReadShardArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && shard_arg_ != NULL) {
    delete shard_arg_;
  }
  shard_arg_ = NULL;
  _internal_metadata_.Clear();
}

bool ShardReadShardArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.ShardReadShardArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.ShardArg shard_arg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shard_arg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string snapshot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshot_id().data(), static_cast<int>(this->snapshot_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.ShardReadShardArg.snapshot_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sql = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sql().data(), static_cast<int>(this->sql().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.ShardReadShardArg.sql"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.ShardReadShardArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.ShardReadShardArg)
  return false;
#undef DO_
}

void ShardReadShardArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.ShardReadShardArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.ShardArg shard_arg = 1;
  if (this->has_shard_arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shard_arg_, output);
  }

  // string snapshot_id = 2;
  if (this->snapshot_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_id().data(), static_cast<int>(this->snapshot_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardReadShardArg.snapshot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->snapshot_id(), output);
  }

  // string sql = 3;
  if (this->sql().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardReadShardArg.sql");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sql(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.ShardReadShardArg)
}

::google::protobuf::uint8* ShardReadShardArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.ShardReadShardArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.ShardArg shard_arg = 1;
  if (this->has_shard_arg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->shard_arg_, deterministic, target);
  }

  // string snapshot_id = 2;
  if (this->snapshot_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_id().data(), static_cast<int>(this->snapshot_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardReadShardArg.snapshot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snapshot_id(), target);
  }

  // string sql = 3;
  if (this->sql().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ShardReadShardArg.sql");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sql(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.ShardReadShardArg)
  return target;
}

size_t ShardReadShardArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.ShardReadShardArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string snapshot_id = 2;
  if (this->snapshot_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snapshot_id());
  }

  // string sql = 3;
  if (this->sql().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sql());
  }

  // .clickhouse.ShardArg shard_arg = 1;
  if (this->has_shard_arg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->shard_arg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardReadShardArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.ShardReadShardArg)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardReadShardArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShardReadShardArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.ShardReadShardArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.ShardReadShardArg)
    MergeFrom(*source);
  }
}

void ShardReadShardArg::MergeFrom(const ShardReadShardArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.ShardReadShardArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snapshot_id().size() > 0) {

    snapshot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_id_);
  }
  if (from.sql().size() > 0) {

    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  if (from.has_shard_arg()) {
    mutable_shard_arg()->::clickhouse::ShardArg::MergeFrom(from.shard_arg());
  }
}

void ShardReadShardArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.ShardReadShardArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardReadShardArg::CopyFrom(const ShardReadShardArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.ShardReadShardArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardReadShardArg::IsInitialized() const {
  return true;
}

void ShardReadShardArg::Swap(ShardReadShardArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShardReadShardArg::InternalSwap(ShardReadShardArg* other) {
  using std::swap;
  snapshot_id_.Swap(&other->snapshot_id_);
  sql_.Swap(&other->sql_);
  swap(shard_arg_, other->shard_arg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShardReadShardArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShardReadResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShardReadResult::kRowCntFieldNumber;
const int ShardReadResult::kColValuesListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShardReadResult::ShardReadResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsShardReadResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.ShardReadResult)
}
ShardReadResult::ShardReadResult(const ShardReadResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      col_values_list_(from.col_values_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_cnt_ = from.row_cnt_;
  // @@protoc_insertion_point(copy_constructor:clickhouse.ShardReadResult)
}

void ShardReadResult::SharedCtor() {
  row_cnt_ = 0;
  _cached_size_ = 0;
}

ShardReadResult::~ShardReadResult() {
  // @@protoc_insertion_point(destructor:clickhouse.ShardReadResult)
  SharedDtor();
}

void ShardReadResult::SharedDtor() {
}

void ShardReadResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardReadResult::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShardReadResult& ShardReadResult::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsShardReadResult();
  return *internal_default_instance();
}

ShardReadResult* ShardReadResult::New(::google::protobuf::Arena* arena) const {
  ShardReadResult* n = new ShardReadResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShardReadResult::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.ShardReadResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  col_values_list_.Clear();
  row_cnt_ = 0;
  _internal_metadata_.Clear();
}

bool ShardReadResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.ShardReadResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 row_cnt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .clickhouse.ColValues col_values_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_col_values_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.ShardReadResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.ShardReadResult)
  return false;
#undef DO_
}

void ShardReadResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.ShardReadResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row_cnt = 1;
  if (this->row_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row_cnt(), output);
  }

  // repeated .clickhouse.ColValues col_values_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->col_values_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->col_values_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.ShardReadResult)
}

::google::protobuf::uint8* ShardReadResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.ShardReadResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row_cnt = 1;
  if (this->row_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row_cnt(), target);
  }

  // repeated .clickhouse.ColValues col_values_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->col_values_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->col_values_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.ShardReadResult)
  return target;
}

size_t ShardReadResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.ShardReadResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .clickhouse.ColValues col_values_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->col_values_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->col_values_list(static_cast<int>(i)));
    }
  }

  // int32 row_cnt = 1;
  if (this->row_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row_cnt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardReadResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.ShardReadResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardReadResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShardReadResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.ShardReadResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.ShardReadResult)
    MergeFrom(*source);
  }
}

void ShardReadResult::MergeFrom(const ShardReadResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.ShardReadResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  col_values_list_.MergeFrom(from.col_values_list_);
  if (from.row_cnt() != 0) {
    set_row_cnt(from.row_cnt());
  }
}

void ShardReadResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.ShardReadResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardReadResult::CopyFrom(const ShardReadResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.ShardReadResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardReadResult::IsInitialized() const {
  return true;
}

void ShardReadResult::Swap(ShardReadResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShardReadResult::InternalSwap(ShardReadResult* other) {
  using std::swap;
  col_values_list_.InternalSwap(&other->col_values_list_);
  swap(row_cnt_, other->row_cnt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShardReadResult::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShardReadArg::InitAsDefaultInstance() {
  ::clickhouse::_ShardReadArg_default_instance_._instance.get_mutable()->read_arg_ = const_cast< ::clickhouse::ShardReadShardArg*>(
      ::clickhouse::ShardReadShardArg::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShardReadArg::kReadArgFieldNumber;
const int ShardReadArg::kShardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShardReadArg::ShardReadArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsShardReadArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.ShardReadArg)
}
ShardReadArg::ShardReadArg(const ShardReadArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shards_(from.shards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_read_arg()) {
    read_arg_ = new ::clickhouse::ShardReadShardArg(*from.read_arg_);
  } else {
    read_arg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.ShardReadArg)
}

void ShardReadArg::SharedCtor() {
  read_arg_ = NULL;
  _cached_size_ = 0;
}

ShardReadArg::~ShardReadArg() {
  // @@protoc_insertion_point(destructor:clickhouse.ShardReadArg)
  SharedDtor();
}

void ShardReadArg::SharedDtor() {
  if (this != internal_default_instance()) delete read_arg_;
}

void ShardReadArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardReadArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShardReadArg& ShardReadArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsShardReadArg();
  return *internal_default_instance();
}

ShardReadArg* ShardReadArg::New(::google::protobuf::Arena* arena) const {
  ShardReadArg* n = new ShardReadArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShardReadArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.ShardReadArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shards_.Clear();
  if (GetArenaNoVirtual() == NULL && read_arg_ != NULL) {
    delete read_arg_;
  }
  read_arg_ = NULL;
  _internal_metadata_.Clear();
}

bool ShardReadArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.ShardReadArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.ShardReadShardArg read_arg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_read_arg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .clickhouse.Shard shards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_shards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.ShardReadArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.ShardReadArg)
  return false;
#undef DO_
}

void ShardReadArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.ShardReadArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.ShardReadShardArg read_arg = 1;
  if (this->has_read_arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->read_arg_, output);
  }

  // repeated .clickhouse.Shard shards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shards(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.ShardReadArg)
}

::google::protobuf::uint8* ShardReadArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.ShardReadArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.ShardReadShardArg read_arg = 1;
  if (this->has_read_arg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->read_arg_, deterministic, target);
  }

  // repeated .clickhouse.Shard shards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->shards(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.ShardReadArg)
  return target;
}

size_t ShardReadArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.ShardReadArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .clickhouse.Shard shards = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->shards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->shards(static_cast<int>(i)));
    }
  }

  // .clickhouse.ShardReadShardArg read_arg = 1;
  if (this->has_read_arg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->read_arg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardReadArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.ShardReadArg)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardReadArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShardReadArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.ShardReadArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.ShardReadArg)
    MergeFrom(*source);
  }
}

void ShardReadArg::MergeFrom(const ShardReadArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.ShardReadArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shards_.MergeFrom(from.shards_);
  if (from.has_read_arg()) {
    mutable_read_arg()->::clickhouse::ShardReadShardArg::MergeFrom(from.read_arg());
  }
}

void ShardReadArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.ShardReadArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardReadArg::CopyFrom(const ShardReadArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.ShardReadArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardReadArg::IsInitialized() const {
  return true;
}

void ShardReadArg::Swap(ShardReadArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShardReadArg::InternalSwap(ShardReadArg* other) {
  using std::swap;
  shards_.InternalSwap(&other->shards_);
  swap(read_arg_, other->read_arg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShardReadArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSnapshotArg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSnapshotArg::kSnapshotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSnapshotArg::GetSnapshotArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsGetSnapshotArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.GetSnapshotArg)
}
GetSnapshotArg::GetSnapshotArg(const GetSnapshotArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.snapshot_id().size() > 0) {
    snapshot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.GetSnapshotArg)
}

void GetSnapshotArg::SharedCtor() {
  snapshot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetSnapshotArg::~GetSnapshotArg() {
  // @@protoc_insertion_point(destructor:clickhouse.GetSnapshotArg)
  SharedDtor();
}

void GetSnapshotArg::SharedDtor() {
  snapshot_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetSnapshotArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSnapshotArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSnapshotArg& GetSnapshotArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsGetSnapshotArg();
  return *internal_default_instance();
}

GetSnapshotArg* GetSnapshotArg::New(::google::protobuf::Arena* arena) const {
  GetSnapshotArg* n = new GetSnapshotArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetSnapshotArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.GetSnapshotArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetSnapshotArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.GetSnapshotArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string snapshot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshot_id().data(), static_cast<int>(this->snapshot_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.GetSnapshotArg.snapshot_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.GetSnapshotArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.GetSnapshotArg)
  return false;
#undef DO_
}

void GetSnapshotArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.GetSnapshotArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string snapshot_id = 1;
  if (this->snapshot_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_id().data(), static_cast<int>(this->snapshot_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.GetSnapshotArg.snapshot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->snapshot_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.GetSnapshotArg)
}

::google::protobuf::uint8* GetSnapshotArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.GetSnapshotArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string snapshot_id = 1;
  if (this->snapshot_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_id().data(), static_cast<int>(this->snapshot_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.GetSnapshotArg.snapshot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snapshot_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.GetSnapshotArg)
  return target;
}

size_t GetSnapshotArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.GetSnapshotArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string snapshot_id = 1;
  if (this->snapshot_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snapshot_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSnapshotArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.GetSnapshotArg)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSnapshotArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSnapshotArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.GetSnapshotArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.GetSnapshotArg)
    MergeFrom(*source);
  }
}

void GetSnapshotArg::MergeFrom(const GetSnapshotArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.GetSnapshotArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snapshot_id().size() > 0) {

    snapshot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_id_);
  }
}

void GetSnapshotArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.GetSnapshotArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSnapshotArg::CopyFrom(const GetSnapshotArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.GetSnapshotArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSnapshotArg::IsInitialized() const {
  return true;
}

void GetSnapshotArg::Swap(GetSnapshotArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSnapshotArg::InternalSwap(GetSnapshotArg* other) {
  using std::swap;
  snapshot_id_.Swap(&other->snapshot_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSnapshotArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReleaseSnapshotArg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReleaseSnapshotArg::kSnapshotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReleaseSnapshotArg::ReleaseSnapshotArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsReleaseSnapshotArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.ReleaseSnapshotArg)
}
ReleaseSnapshotArg::ReleaseSnapshotArg(const ReleaseSnapshotArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.snapshot_id().size() > 0) {
    snapshot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.ReleaseSnapshotArg)
}

void ReleaseSnapshotArg::SharedCtor() {
  snapshot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReleaseSnapshotArg::~ReleaseSnapshotArg() {
  // @@protoc_insertion_point(destructor:clickhouse.ReleaseSnapshotArg)
  SharedDtor();
}

void ReleaseSnapshotArg::SharedDtor() {
  snapshot_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReleaseSnapshotArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReleaseSnapshotArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReleaseSnapshotArg& ReleaseSnapshotArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsReleaseSnapshotArg();
  return *internal_default_instance();
}

ReleaseSnapshotArg* ReleaseSnapshotArg::New(::google::protobuf::Arena* arena) const {
  ReleaseSnapshotArg* n = new ReleaseSnapshotArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReleaseSnapshotArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.ReleaseSnapshotArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ReleaseSnapshotArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.ReleaseSnapshotArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string snapshot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshot_id().data(), static_cast<int>(this->snapshot_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.ReleaseSnapshotArg.snapshot_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.ReleaseSnapshotArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.ReleaseSnapshotArg)
  return false;
#undef DO_
}

void ReleaseSnapshotArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.ReleaseSnapshotArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string snapshot_id = 1;
  if (this->snapshot_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_id().data(), static_cast<int>(this->snapshot_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ReleaseSnapshotArg.snapshot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->snapshot_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.ReleaseSnapshotArg)
}

::google::protobuf::uint8* ReleaseSnapshotArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.ReleaseSnapshotArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string snapshot_id = 1;
  if (this->snapshot_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_id().data(), static_cast<int>(this->snapshot_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.ReleaseSnapshotArg.snapshot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snapshot_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.ReleaseSnapshotArg)
  return target;
}

size_t ReleaseSnapshotArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.ReleaseSnapshotArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string snapshot_id = 1;
  if (this->snapshot_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snapshot_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReleaseSnapshotArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.ReleaseSnapshotArg)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseSnapshotArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReleaseSnapshotArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.ReleaseSnapshotArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.ReleaseSnapshotArg)
    MergeFrom(*source);
  }
}

void ReleaseSnapshotArg::MergeFrom(const ReleaseSnapshotArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.ReleaseSnapshotArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snapshot_id().size() > 0) {

    snapshot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_id_);
  }
}

void ReleaseSnapshotArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.ReleaseSnapshotArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseSnapshotArg::CopyFrom(const ReleaseSnapshotArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.ReleaseSnapshotArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseSnapshotArg::IsInitialized() const {
  return true;
}

void ReleaseSnapshotArg::Swap(ReleaseSnapshotArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReleaseSnapshotArg::InternalSwap(ReleaseSnapshotArg* other) {
  using std::swap;
  snapshot_id_.Swap(&other->snapshot_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReleaseSnapshotArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BeginArg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginArg::kTxnIdFieldNumber;
const int BeginArg::kSetSnapshotFieldNumber;
const int BeginArg::kDisableWalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginArg::BeginArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsBeginArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.BeginArg)
}
BeginArg::BeginArg(const BeginArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  ::memcpy(&set_snapshot_, &from.set_snapshot_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_wal_) -
    reinterpret_cast<char*>(&set_snapshot_)) + sizeof(disable_wal_));
  // @@protoc_insertion_point(copy_constructor:clickhouse.BeginArg)
}

void BeginArg::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&set_snapshot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_wal_) -
      reinterpret_cast<char*>(&set_snapshot_)) + sizeof(disable_wal_));
  _cached_size_ = 0;
}

BeginArg::~BeginArg() {
  // @@protoc_insertion_point(destructor:clickhouse.BeginArg)
  SharedDtor();
}

void BeginArg::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeginArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BeginArg& BeginArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsBeginArg();
  return *internal_default_instance();
}

BeginArg* BeginArg::New(::google::protobuf::Arena* arena) const {
  BeginArg* n = new BeginArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeginArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.BeginArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&set_snapshot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_wal_) -
      reinterpret_cast<char*>(&set_snapshot_)) + sizeof(disable_wal_));
  _internal_metadata_.Clear();
}

bool BeginArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.BeginArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.BeginArg.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool set_snapshot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &set_snapshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_wal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_wal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.BeginArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.BeginArg)
  return false;
#undef DO_
}

void BeginArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.BeginArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.BeginArg.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txn_id(), output);
  }

  // bool set_snapshot = 2;
  if (this->set_snapshot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->set_snapshot(), output);
  }

  // bool disable_wal = 3;
  if (this->disable_wal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->disable_wal(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.BeginArg)
}

::google::protobuf::uint8* BeginArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.BeginArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.BeginArg.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txn_id(), target);
  }

  // bool set_snapshot = 2;
  if (this->set_snapshot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->set_snapshot(), target);
  }

  // bool disable_wal = 3;
  if (this->disable_wal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->disable_wal(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.BeginArg)
  return target;
}

size_t BeginArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.BeginArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // bool set_snapshot = 2;
  if (this->set_snapshot() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_wal = 3;
  if (this->disable_wal() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.BeginArg)
  GOOGLE_DCHECK_NE(&from, this);
  const BeginArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BeginArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.BeginArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.BeginArg)
    MergeFrom(*source);
  }
}

void BeginArg::MergeFrom(const BeginArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.BeginArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.set_snapshot() != 0) {
    set_set_snapshot(from.set_snapshot());
  }
  if (from.disable_wal() != 0) {
    set_disable_wal(from.disable_wal());
  }
}

void BeginArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.BeginArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginArg::CopyFrom(const BeginArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.BeginArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginArg::IsInitialized() const {
  return true;
}

void BeginArg::Swap(BeginArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginArg::InternalSwap(BeginArg* other) {
  using std::swap;
  txn_id_.Swap(&other->txn_id_);
  swap(set_snapshot_, other->set_snapshot_);
  swap(disable_wal_, other->disable_wal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeginArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommitArg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitArg::kTxnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitArg::CommitArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsCommitArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.CommitArg)
}
CommitArg::CommitArg(const CommitArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.CommitArg)
}

void CommitArg::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CommitArg::~CommitArg() {
  // @@protoc_insertion_point(destructor:clickhouse.CommitArg)
  SharedDtor();
}

void CommitArg::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommitArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommitArg& CommitArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsCommitArg();
  return *internal_default_instance();
}

CommitArg* CommitArg::New(::google::protobuf::Arena* arena) const {
  CommitArg* n = new CommitArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.CommitArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CommitArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.CommitArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.CommitArg.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.CommitArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.CommitArg)
  return false;
#undef DO_
}

void CommitArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.CommitArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.CommitArg.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txn_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.CommitArg)
}

::google::protobuf::uint8* CommitArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.CommitArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.CommitArg.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txn_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.CommitArg)
  return target;
}

size_t CommitArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.CommitArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.CommitArg)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.CommitArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.CommitArg)
    MergeFrom(*source);
  }
}

void CommitArg::MergeFrom(const CommitArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.CommitArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
}

void CommitArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.CommitArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitArg::CopyFrom(const CommitArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.CommitArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitArg::IsInitialized() const {
  return true;
}

void CommitArg::Swap(CommitArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitArg::InternalSwap(CommitArg* other) {
  using std::swap;
  txn_id_.Swap(&other->txn_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RollbackArg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RollbackArg::kTxnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RollbackArg::RollbackArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsRollbackArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.RollbackArg)
}
RollbackArg::RollbackArg(const RollbackArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.RollbackArg)
}

void RollbackArg::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RollbackArg::~RollbackArg() {
  // @@protoc_insertion_point(destructor:clickhouse.RollbackArg)
  SharedDtor();
}

void RollbackArg::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RollbackArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollbackArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RollbackArg& RollbackArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsRollbackArg();
  return *internal_default_instance();
}

RollbackArg* RollbackArg::New(::google::protobuf::Arena* arena) const {
  RollbackArg* n = new RollbackArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RollbackArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.RollbackArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RollbackArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.RollbackArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.RollbackArg.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.RollbackArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.RollbackArg)
  return false;
#undef DO_
}

void RollbackArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.RollbackArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.RollbackArg.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txn_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.RollbackArg)
}

::google::protobuf::uint8* RollbackArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.RollbackArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.RollbackArg.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txn_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.RollbackArg)
  return target;
}

size_t RollbackArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.RollbackArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollbackArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.RollbackArg)
  GOOGLE_DCHECK_NE(&from, this);
  const RollbackArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RollbackArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.RollbackArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.RollbackArg)
    MergeFrom(*source);
  }
}

void RollbackArg::MergeFrom(const RollbackArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.RollbackArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
}

void RollbackArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.RollbackArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollbackArg::CopyFrom(const RollbackArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.RollbackArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollbackArg::IsInitialized() const {
  return true;
}

void RollbackArg::Swap(RollbackArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RollbackArg::InternalSwap(RollbackArg* other) {
  using std::swap;
  txn_id_.Swap(&other->txn_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RollbackArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TableShardsArg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableShardsArg::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableShardsArg::TableShardsArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsTableShardsArg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.TableShardsArg)
}
TableShardsArg::TableShardsArg(const TableShardsArg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.TableShardsArg)
}

void TableShardsArg::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TableShardsArg::~TableShardsArg() {
  // @@protoc_insertion_point(destructor:clickhouse.TableShardsArg)
  SharedDtor();
}

void TableShardsArg::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableShardsArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableShardsArg::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableShardsArg& TableShardsArg::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsTableShardsArg();
  return *internal_default_instance();
}

TableShardsArg* TableShardsArg::New(::google::protobuf::Arena* arena) const {
  TableShardsArg* n = new TableShardsArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableShardsArg::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.TableShardsArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TableShardsArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.TableShardsArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.TableShardsArg.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.TableShardsArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.TableShardsArg)
  return false;
#undef DO_
}

void TableShardsArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.TableShardsArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.TableShardsArg.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.TableShardsArg)
}

::google::protobuf::uint8* TableShardsArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.TableShardsArg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.TableShardsArg.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.TableShardsArg)
  return target;
}

size_t TableShardsArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.TableShardsArg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableShardsArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.TableShardsArg)
  GOOGLE_DCHECK_NE(&from, this);
  const TableShardsArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableShardsArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.TableShardsArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.TableShardsArg)
    MergeFrom(*source);
  }
}

void TableShardsArg::MergeFrom(const TableShardsArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.TableShardsArg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void TableShardsArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.TableShardsArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableShardsArg::CopyFrom(const TableShardsArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.TableShardsArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableShardsArg::IsInitialized() const {
  return true;
}

void TableShardsArg::Swap(TableShardsArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableShardsArg::InternalSwap(TableShardsArg* other) {
  using std::swap;
  table_name_.Swap(&other->table_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableShardsArg::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TableShardsResult::InitAsDefaultInstance() {
  ::clickhouse::_TableShardsResult_default_instance_._instance.get_mutable()->result_ = const_cast< ::clickhouse::BoolResult*>(
      ::clickhouse::BoolResult::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableShardsResult::kResultFieldNumber;
const int TableShardsResult::kTableNameFieldNumber;
const int TableShardsResult::kShardIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableShardsResult::TableShardsResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_clickhouse_2eproto::InitDefaultsTableShardsResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clickhouse.TableShardsResult)
}
TableShardsResult::TableShardsResult(const TableShardsResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shard_ids_(from.shard_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_result()) {
    result_ = new ::clickhouse::BoolResult(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:clickhouse.TableShardsResult)
}

void TableShardsResult::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = NULL;
  _cached_size_ = 0;
}

TableShardsResult::~TableShardsResult() {
  // @@protoc_insertion_point(destructor:clickhouse.TableShardsResult)
  SharedDtor();
}

void TableShardsResult::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
}

void TableShardsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableShardsResult::descriptor() {
  ::protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableShardsResult& TableShardsResult::default_instance() {
  ::protobuf_clickhouse_2eproto::InitDefaultsTableShardsResult();
  return *internal_default_instance();
}

TableShardsResult* TableShardsResult::New(::google::protobuf::Arena* arena) const {
  TableShardsResult* n = new TableShardsResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableShardsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:clickhouse.TableShardsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shard_ids_.Clear();
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
  _internal_metadata_.Clear();
}

bool TableShardsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clickhouse.TableShardsResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clickhouse.BoolResult result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clickhouse.TableShardsResult.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 shard_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shard_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_shard_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clickhouse.TableShardsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clickhouse.TableShardsResult)
  return false;
#undef DO_
}

void TableShardsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clickhouse.TableShardsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.BoolResult result = 1;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.TableShardsResult.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table_name(), output);
  }

  // repeated int64 shard_ids = 3;
  if (this->shard_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _shard_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->shard_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->shard_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clickhouse.TableShardsResult)
}

::google::protobuf::uint8* TableShardsResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clickhouse.TableShardsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clickhouse.BoolResult result = 1;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->result_, deterministic, target);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clickhouse.TableShardsResult.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }

  // repeated int64 shard_ids = 3;
  if (this->shard_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _shard_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->shard_ids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clickhouse.TableShardsResult)
  return target;
}

size_t TableShardsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clickhouse.TableShardsResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 shard_ids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->shard_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shard_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // .clickhouse.BoolResult result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableShardsResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clickhouse.TableShardsResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TableShardsResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableShardsResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clickhouse.TableShardsResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clickhouse.TableShardsResult)
    MergeFrom(*source);
  }
}

void TableShardsResult::MergeFrom(const TableShardsResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clickhouse.TableShardsResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shard_ids_.MergeFrom(from.shard_ids_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_result()) {
    mutable_result()->::clickhouse::BoolResult::MergeFrom(from.result());
  }
}

void TableShardsResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clickhouse.TableShardsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableShardsResult::CopyFrom(const TableShardsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clickhouse.TableShardsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableShardsResult::IsInitialized() const {
  return true;
}

void TableShardsResult::Swap(TableShardsResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableShardsResult::InternalSwap(TableShardsResult* other) {
  using std::swap;
  shard_ids_.InternalSwap(&other->shard_ids_);
  table_name_.Swap(&other->table_name_);
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableShardsResult::GetMetadata() const {
  protobuf_clickhouse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clickhouse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace clickhouse

// @@protoc_insertion_point(global_scope)
