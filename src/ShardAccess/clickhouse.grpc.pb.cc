// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: clickhouse.proto

#include "clickhouse.pb.h"
#include "clickhouse.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace clickhouse {

static const char* Worker_method_names[] = {
  "/clickhouse.Worker/CreateShard",
  "/clickhouse.Worker/DropShard",
  "/clickhouse.Worker/TruncateShard",
  "/clickhouse.Worker/DropTable",
  "/clickhouse.Worker/ChangeTableName",
  "/clickhouse.Worker/ChangeColName",
  "/clickhouse.Worker/ChangeColType",
  "/clickhouse.Worker/AddCol",
  "/clickhouse.Worker/DropCol",
  "/clickhouse.Worker/ChangeIdxName",
  "/clickhouse.Worker/AddIdx",
  "/clickhouse.Worker/DropIdx",
  "/clickhouse.Worker/GetSnapshot",
  "/clickhouse.Worker/ReleaseSnapshot",
  "/clickhouse.Worker/ShardReadShard",
  "/clickhouse.Worker/ShardRead",
  "/clickhouse.Worker/Begin",
  "/clickhouse.Worker/Commit",
  "/clickhouse.Worker/Rollback",
  "/clickhouse.Worker/ShardInsert",
  "/clickhouse.Worker/ShardDelete",
  "/clickhouse.Worker/ShardUpdate",
  "/clickhouse.Worker/TableShards",
};

std::unique_ptr< Worker::Stub> Worker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Worker::Stub> stub(new Worker::Stub(channel));
  return stub;
}

Worker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateShard_(Worker_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropShard_(Worker_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TruncateShard_(Worker_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropTable_(Worker_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeTableName_(Worker_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeColName_(Worker_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeColType_(Worker_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddCol_(Worker_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropCol_(Worker_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeIdxName_(Worker_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddIdx_(Worker_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropIdx_(Worker_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSnapshot_(Worker_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReleaseSnapshot_(Worker_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShardReadShard_(Worker_method_names[14], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ShardRead_(Worker_method_names[15], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Begin_(Worker_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Commit_(Worker_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rollback_(Worker_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShardInsert_(Worker_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShardDelete_(Worker_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShardUpdate_(Worker_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TableShards_(Worker_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Worker::Stub::CreateShard(::grpc::ClientContext* context, const ::clickhouse::CreateShardArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateShard_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncCreateShardRaw(::grpc::ClientContext* context, const ::clickhouse::CreateShardArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_CreateShard_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncCreateShardRaw(::grpc::ClientContext* context, const ::clickhouse::CreateShardArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_CreateShard_, context, request, false);
}

::grpc::Status Worker::Stub::DropShard(::grpc::ClientContext* context, const ::clickhouse::DropShardArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropShard_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncDropShardRaw(::grpc::ClientContext* context, const ::clickhouse::DropShardArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_DropShard_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncDropShardRaw(::grpc::ClientContext* context, const ::clickhouse::DropShardArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_DropShard_, context, request, false);
}

::grpc::Status Worker::Stub::TruncateShard(::grpc::ClientContext* context, const ::clickhouse::TruncateShardArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TruncateShard_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncTruncateShardRaw(::grpc::ClientContext* context, const ::clickhouse::TruncateShardArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_TruncateShard_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncTruncateShardRaw(::grpc::ClientContext* context, const ::clickhouse::TruncateShardArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_TruncateShard_, context, request, false);
}

::grpc::Status Worker::Stub::DropTable(::grpc::ClientContext* context, const ::clickhouse::DropTableArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropTable_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncDropTableRaw(::grpc::ClientContext* context, const ::clickhouse::DropTableArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_DropTable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncDropTableRaw(::grpc::ClientContext* context, const ::clickhouse::DropTableArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_DropTable_, context, request, false);
}

::grpc::Status Worker::Stub::ChangeTableName(::grpc::ClientContext* context, const ::clickhouse::ChangeTableNameArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChangeTableName_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncChangeTableNameRaw(::grpc::ClientContext* context, const ::clickhouse::ChangeTableNameArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_ChangeTableName_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncChangeTableNameRaw(::grpc::ClientContext* context, const ::clickhouse::ChangeTableNameArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_ChangeTableName_, context, request, false);
}

::grpc::Status Worker::Stub::ChangeColName(::grpc::ClientContext* context, const ::clickhouse::ChangeColNameArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChangeColName_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncChangeColNameRaw(::grpc::ClientContext* context, const ::clickhouse::ChangeColNameArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_ChangeColName_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncChangeColNameRaw(::grpc::ClientContext* context, const ::clickhouse::ChangeColNameArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_ChangeColName_, context, request, false);
}

::grpc::Status Worker::Stub::ChangeColType(::grpc::ClientContext* context, const ::clickhouse::ChangeColTypeArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChangeColType_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncChangeColTypeRaw(::grpc::ClientContext* context, const ::clickhouse::ChangeColTypeArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_ChangeColType_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncChangeColTypeRaw(::grpc::ClientContext* context, const ::clickhouse::ChangeColTypeArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_ChangeColType_, context, request, false);
}

::grpc::Status Worker::Stub::AddCol(::grpc::ClientContext* context, const ::clickhouse::AddColArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddCol_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncAddColRaw(::grpc::ClientContext* context, const ::clickhouse::AddColArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_AddCol_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncAddColRaw(::grpc::ClientContext* context, const ::clickhouse::AddColArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_AddCol_, context, request, false);
}

::grpc::Status Worker::Stub::DropCol(::grpc::ClientContext* context, const ::clickhouse::DropColArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropCol_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncDropColRaw(::grpc::ClientContext* context, const ::clickhouse::DropColArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_DropCol_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncDropColRaw(::grpc::ClientContext* context, const ::clickhouse::DropColArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_DropCol_, context, request, false);
}

::grpc::Status Worker::Stub::ChangeIdxName(::grpc::ClientContext* context, const ::clickhouse::ChangeIdxNameArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChangeIdxName_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncChangeIdxNameRaw(::grpc::ClientContext* context, const ::clickhouse::ChangeIdxNameArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_ChangeIdxName_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncChangeIdxNameRaw(::grpc::ClientContext* context, const ::clickhouse::ChangeIdxNameArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_ChangeIdxName_, context, request, false);
}

::grpc::Status Worker::Stub::AddIdx(::grpc::ClientContext* context, const ::clickhouse::AddIdxArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddIdx_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncAddIdxRaw(::grpc::ClientContext* context, const ::clickhouse::AddIdxArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_AddIdx_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncAddIdxRaw(::grpc::ClientContext* context, const ::clickhouse::AddIdxArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_AddIdx_, context, request, false);
}

::grpc::Status Worker::Stub::DropIdx(::grpc::ClientContext* context, const ::clickhouse::DropIdxArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropIdx_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncDropIdxRaw(::grpc::ClientContext* context, const ::clickhouse::DropIdxArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_DropIdx_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncDropIdxRaw(::grpc::ClientContext* context, const ::clickhouse::DropIdxArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_DropIdx_, context, request, false);
}

::grpc::Status Worker::Stub::GetSnapshot(::grpc::ClientContext* context, const ::clickhouse::GetSnapshotArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSnapshot_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncGetSnapshotRaw(::grpc::ClientContext* context, const ::clickhouse::GetSnapshotArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_GetSnapshot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncGetSnapshotRaw(::grpc::ClientContext* context, const ::clickhouse::GetSnapshotArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_GetSnapshot_, context, request, false);
}

::grpc::Status Worker::Stub::ReleaseSnapshot(::grpc::ClientContext* context, const ::clickhouse::ReleaseSnapshotArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReleaseSnapshot_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncReleaseSnapshotRaw(::grpc::ClientContext* context, const ::clickhouse::ReleaseSnapshotArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_ReleaseSnapshot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncReleaseSnapshotRaw(::grpc::ClientContext* context, const ::clickhouse::ReleaseSnapshotArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_ReleaseSnapshot_, context, request, false);
}

::grpc::ClientReader< ::clickhouse::ShardReadResult>* Worker::Stub::ShardReadShardRaw(::grpc::ClientContext* context, const ::clickhouse::ShardReadShardArg& request) {
  return ::grpc::internal::ClientReaderFactory< ::clickhouse::ShardReadResult>::Create(channel_.get(), rpcmethod_ShardReadShard_, context, request);
}

::grpc::ClientAsyncReader< ::clickhouse::ShardReadResult>* Worker::Stub::AsyncShardReadShardRaw(::grpc::ClientContext* context, const ::clickhouse::ShardReadShardArg& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::clickhouse::ShardReadResult>::Create(channel_.get(), cq, rpcmethod_ShardReadShard_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::clickhouse::ShardReadResult>* Worker::Stub::PrepareAsyncShardReadShardRaw(::grpc::ClientContext* context, const ::clickhouse::ShardReadShardArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::clickhouse::ShardReadResult>::Create(channel_.get(), cq, rpcmethod_ShardReadShard_, context, request, false, nullptr);
}

::grpc::ClientReader< ::clickhouse::ShardReadResult>* Worker::Stub::ShardReadRaw(::grpc::ClientContext* context, const ::clickhouse::ShardReadArg& request) {
  return ::grpc::internal::ClientReaderFactory< ::clickhouse::ShardReadResult>::Create(channel_.get(), rpcmethod_ShardRead_, context, request);
}

::grpc::ClientAsyncReader< ::clickhouse::ShardReadResult>* Worker::Stub::AsyncShardReadRaw(::grpc::ClientContext* context, const ::clickhouse::ShardReadArg& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::clickhouse::ShardReadResult>::Create(channel_.get(), cq, rpcmethod_ShardRead_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::clickhouse::ShardReadResult>* Worker::Stub::PrepareAsyncShardReadRaw(::grpc::ClientContext* context, const ::clickhouse::ShardReadArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::clickhouse::ShardReadResult>::Create(channel_.get(), cq, rpcmethod_ShardRead_, context, request, false, nullptr);
}

::grpc::Status Worker::Stub::Begin(::grpc::ClientContext* context, const ::clickhouse::BeginArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Begin_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncBeginRaw(::grpc::ClientContext* context, const ::clickhouse::BeginArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_Begin_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncBeginRaw(::grpc::ClientContext* context, const ::clickhouse::BeginArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_Begin_, context, request, false);
}

::grpc::Status Worker::Stub::Commit(::grpc::ClientContext* context, const ::clickhouse::CommitArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Commit_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncCommitRaw(::grpc::ClientContext* context, const ::clickhouse::CommitArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_Commit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::clickhouse::CommitArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_Commit_, context, request, false);
}

::grpc::Status Worker::Stub::Rollback(::grpc::ClientContext* context, const ::clickhouse::RollbackArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Rollback_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncRollbackRaw(::grpc::ClientContext* context, const ::clickhouse::RollbackArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_Rollback_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncRollbackRaw(::grpc::ClientContext* context, const ::clickhouse::RollbackArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_Rollback_, context, request, false);
}

::grpc::Status Worker::Stub::ShardInsert(::grpc::ClientContext* context, const ::clickhouse::ShardInsertArg& request, ::clickhouse::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShardInsert_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::AsyncShardInsertRaw(::grpc::ClientContext* context, const ::clickhouse::ShardInsertArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_ShardInsert_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::BoolResult>* Worker::Stub::PrepareAsyncShardInsertRaw(::grpc::ClientContext* context, const ::clickhouse::ShardInsertArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::BoolResult>::Create(channel_.get(), cq, rpcmethod_ShardInsert_, context, request, false);
}

::grpc::Status Worker::Stub::ShardDelete(::grpc::ClientContext* context, const ::clickhouse::ShardDeleteArg& request, ::clickhouse::ShardDeleteResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShardDelete_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::ShardDeleteResult>* Worker::Stub::AsyncShardDeleteRaw(::grpc::ClientContext* context, const ::clickhouse::ShardDeleteArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::ShardDeleteResult>::Create(channel_.get(), cq, rpcmethod_ShardDelete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::ShardDeleteResult>* Worker::Stub::PrepareAsyncShardDeleteRaw(::grpc::ClientContext* context, const ::clickhouse::ShardDeleteArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::ShardDeleteResult>::Create(channel_.get(), cq, rpcmethod_ShardDelete_, context, request, false);
}

::grpc::Status Worker::Stub::ShardUpdate(::grpc::ClientContext* context, const ::clickhouse::ShardUpdateArg& request, ::clickhouse::ShardUpdateResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShardUpdate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::ShardUpdateResult>* Worker::Stub::AsyncShardUpdateRaw(::grpc::ClientContext* context, const ::clickhouse::ShardUpdateArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::ShardUpdateResult>::Create(channel_.get(), cq, rpcmethod_ShardUpdate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::ShardUpdateResult>* Worker::Stub::PrepareAsyncShardUpdateRaw(::grpc::ClientContext* context, const ::clickhouse::ShardUpdateArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::ShardUpdateResult>::Create(channel_.get(), cq, rpcmethod_ShardUpdate_, context, request, false);
}

::grpc::Status Worker::Stub::TableShards(::grpc::ClientContext* context, const ::clickhouse::TableShardsArg& request, ::clickhouse::TableShardsResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TableShards_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::TableShardsResult>* Worker::Stub::AsyncTableShardsRaw(::grpc::ClientContext* context, const ::clickhouse::TableShardsArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::TableShardsResult>::Create(channel_.get(), cq, rpcmethod_TableShards_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clickhouse::TableShardsResult>* Worker::Stub::PrepareAsyncTableShardsRaw(::grpc::ClientContext* context, const ::clickhouse::TableShardsArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::clickhouse::TableShardsResult>::Create(channel_.get(), cq, rpcmethod_TableShards_, context, request, false);
}

Worker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::CreateShardArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::CreateShard), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::DropShardArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::DropShard), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::TruncateShardArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::TruncateShard), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::DropTableArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::DropTable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::ChangeTableNameArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::ChangeTableName), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::ChangeColNameArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::ChangeColName), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::ChangeColTypeArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::ChangeColType), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::AddColArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::AddCol), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::DropColArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::DropCol), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::ChangeIdxNameArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::ChangeIdxName), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::AddIdxArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::AddIdx), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::DropIdxArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::DropIdx), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::GetSnapshotArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::GetSnapshot), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::ReleaseSnapshotArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::ReleaseSnapshot), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[14],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Worker::Service, ::clickhouse::ShardReadShardArg, ::clickhouse::ShardReadResult>(
          std::mem_fn(&Worker::Service::ShardReadShard), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[15],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Worker::Service, ::clickhouse::ShardReadArg, ::clickhouse::ShardReadResult>(
          std::mem_fn(&Worker::Service::ShardRead), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::BeginArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::Begin), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::CommitArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::Commit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::RollbackArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::Rollback), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::ShardInsertArg, ::clickhouse::BoolResult>(
          std::mem_fn(&Worker::Service::ShardInsert), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::ShardDeleteArg, ::clickhouse::ShardDeleteResult>(
          std::mem_fn(&Worker::Service::ShardDelete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::ShardUpdateArg, ::clickhouse::ShardUpdateResult>(
          std::mem_fn(&Worker::Service::ShardUpdate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::clickhouse::TableShardsArg, ::clickhouse::TableShardsResult>(
          std::mem_fn(&Worker::Service::TableShards), this)));
}

Worker::Service::~Service() {
}

::grpc::Status Worker::Service::CreateShard(::grpc::ServerContext* context, const ::clickhouse::CreateShardArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::DropShard(::grpc::ServerContext* context, const ::clickhouse::DropShardArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::TruncateShard(::grpc::ServerContext* context, const ::clickhouse::TruncateShardArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::DropTable(::grpc::ServerContext* context, const ::clickhouse::DropTableArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::ChangeTableName(::grpc::ServerContext* context, const ::clickhouse::ChangeTableNameArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::ChangeColName(::grpc::ServerContext* context, const ::clickhouse::ChangeColNameArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::ChangeColType(::grpc::ServerContext* context, const ::clickhouse::ChangeColTypeArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::AddCol(::grpc::ServerContext* context, const ::clickhouse::AddColArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::DropCol(::grpc::ServerContext* context, const ::clickhouse::DropColArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::ChangeIdxName(::grpc::ServerContext* context, const ::clickhouse::ChangeIdxNameArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::AddIdx(::grpc::ServerContext* context, const ::clickhouse::AddIdxArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::DropIdx(::grpc::ServerContext* context, const ::clickhouse::DropIdxArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::GetSnapshot(::grpc::ServerContext* context, const ::clickhouse::GetSnapshotArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::ReleaseSnapshot(::grpc::ServerContext* context, const ::clickhouse::ReleaseSnapshotArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::ShardReadShard(::grpc::ServerContext* context, const ::clickhouse::ShardReadShardArg* request, ::grpc::ServerWriter< ::clickhouse::ShardReadResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::ShardRead(::grpc::ServerContext* context, const ::clickhouse::ShardReadArg* request, ::grpc::ServerWriter< ::clickhouse::ShardReadResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::Begin(::grpc::ServerContext* context, const ::clickhouse::BeginArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::Commit(::grpc::ServerContext* context, const ::clickhouse::CommitArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::Rollback(::grpc::ServerContext* context, const ::clickhouse::RollbackArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::ShardInsert(::grpc::ServerContext* context, const ::clickhouse::ShardInsertArg* request, ::clickhouse::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::ShardDelete(::grpc::ServerContext* context, const ::clickhouse::ShardDeleteArg* request, ::clickhouse::ShardDeleteResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::ShardUpdate(::grpc::ServerContext* context, const ::clickhouse::ShardUpdateArg* request, ::clickhouse::ShardUpdateResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::TableShards(::grpc::ServerContext* context, const ::clickhouse::TableShardsArg* request, ::clickhouse::TableShardsResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace clickhouse

