// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ServerProtocol.capnp

#include "ServerProtocol.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<50> b_ed6db570e4740cef = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    239,  12, 116, 228, 112, 181, 109, 237,
     21,   0,   0,   0,   1,   0,   0,   0,
    238,  15, 172,  20, 140, 100,  26, 130,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  80, 114,
    111, 116, 111,  99, 111, 108,  46,  99,
     97, 112, 110, 112,  58,  67, 111, 110,
    110, 101,  99, 116,  65, 110, 100,  67,
    111, 109, 112, 117, 116, 101,  68,  97,
    116,  97,  82, 101, 113,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    115,  99, 114, 105, 112, 116,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ed6db570e4740cef = b_ed6db570e4740cef.words;
#if !CAPNP_LITE
static const uint16_t m_ed6db570e4740cef[] = {1, 0};
static const uint16_t i_ed6db570e4740cef[] = {0, 1};
const ::capnp::_::RawSchema s_ed6db570e4740cef = {
  0xed6db570e4740cef, b_ed6db570e4740cef.words, 50, nullptr, m_ed6db570e4740cef,
  0, 2, i_ed6db570e4740cef, nullptr, nullptr, { &s_ed6db570e4740cef, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_be7b8f1ac02221a7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    167,  33,  34, 192,  26, 143, 123, 190,
     21,   0,   0,   0,   1,   0,   1,   0,
    238,  15, 172,  20, 140, 100,  26, 130,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  80, 114,
    111, 116, 111,  99, 111, 108,  46,  99,
     97, 112, 110, 112,  58,  67, 111, 110,
    110, 101,  99, 116,  65, 110, 100,  67,
    111, 109, 112, 117, 116, 101,  68,  97,
    116,  97,  82, 101, 115, 112,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_be7b8f1ac02221a7 = b_be7b8f1ac02221a7.words;
#if !CAPNP_LITE
static const uint16_t m_be7b8f1ac02221a7[] = {1, 0};
static const uint16_t i_be7b8f1ac02221a7[] = {0, 1};
const ::capnp::_::RawSchema s_be7b8f1ac02221a7 = {
  0xbe7b8f1ac02221a7, b_be7b8f1ac02221a7.words, 50, nullptr, m_be7b8f1ac02221a7,
  0, 2, i_be7b8f1ac02221a7, nullptr, nullptr, { &s_be7b8f1ac02221a7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// ConnectAndComputeDataReq
constexpr uint16_t ConnectAndComputeDataReq::_capnpPrivate::dataWordSize;
constexpr uint16_t ConnectAndComputeDataReq::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ConnectAndComputeDataReq::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ConnectAndComputeDataReq::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ConnectAndComputeDataResp
constexpr uint16_t ConnectAndComputeDataResp::_capnpPrivate::dataWordSize;
constexpr uint16_t ConnectAndComputeDataResp::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ConnectAndComputeDataResp::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ConnectAndComputeDataResp::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



