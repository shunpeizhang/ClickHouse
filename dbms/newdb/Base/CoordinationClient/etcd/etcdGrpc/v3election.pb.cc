// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v3election.proto

#include "v3election.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_kv_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KeyValue_kv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseHeader_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_v3election_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LeaderKey_v3election_2eproto;
namespace v3electionpb {
class CampaignRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CampaignRequest> _instance;
} _CampaignRequest_default_instance_;
class CampaignResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CampaignResponse> _instance;
} _CampaignResponse_default_instance_;
class LeaderKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaderKey> _instance;
} _LeaderKey_default_instance_;
class LeaderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaderRequest> _instance;
} _LeaderRequest_default_instance_;
class LeaderResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaderResponse> _instance;
} _LeaderResponse_default_instance_;
class ResignRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResignRequest> _instance;
} _ResignRequest_default_instance_;
class ResignResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResignResponse> _instance;
} _ResignResponse_default_instance_;
class ProclaimRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProclaimRequest> _instance;
} _ProclaimRequest_default_instance_;
class ProclaimResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProclaimResponse> _instance;
} _ProclaimResponse_default_instance_;
}  // namespace v3electionpb
static void InitDefaultsCampaignRequest_v3election_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v3electionpb::_CampaignRequest_default_instance_;
    new (ptr) ::v3electionpb::CampaignRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::CampaignRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CampaignRequest_v3election_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCampaignRequest_v3election_2eproto}, {}};

static void InitDefaultsCampaignResponse_v3election_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v3electionpb::_CampaignResponse_default_instance_;
    new (ptr) ::v3electionpb::CampaignResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::CampaignResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CampaignResponse_v3election_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCampaignResponse_v3election_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,
      &scc_info_LeaderKey_v3election_2eproto.base,}};

static void InitDefaultsLeaderKey_v3election_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v3electionpb::_LeaderKey_default_instance_;
    new (ptr) ::v3electionpb::LeaderKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::LeaderKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LeaderKey_v3election_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLeaderKey_v3election_2eproto}, {}};

static void InitDefaultsLeaderRequest_v3election_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v3electionpb::_LeaderRequest_default_instance_;
    new (ptr) ::v3electionpb::LeaderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::LeaderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LeaderRequest_v3election_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLeaderRequest_v3election_2eproto}, {}};

static void InitDefaultsLeaderResponse_v3election_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v3electionpb::_LeaderResponse_default_instance_;
    new (ptr) ::v3electionpb::LeaderResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::LeaderResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LeaderResponse_v3election_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLeaderResponse_v3election_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,
      &scc_info_KeyValue_kv_2eproto.base,}};

static void InitDefaultsResignRequest_v3election_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v3electionpb::_ResignRequest_default_instance_;
    new (ptr) ::v3electionpb::ResignRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::ResignRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResignRequest_v3election_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResignRequest_v3election_2eproto}, {
      &scc_info_LeaderKey_v3election_2eproto.base,}};

static void InitDefaultsResignResponse_v3election_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v3electionpb::_ResignResponse_default_instance_;
    new (ptr) ::v3electionpb::ResignResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::ResignResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResignResponse_v3election_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResignResponse_v3election_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsProclaimRequest_v3election_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v3electionpb::_ProclaimRequest_default_instance_;
    new (ptr) ::v3electionpb::ProclaimRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::ProclaimRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProclaimRequest_v3election_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProclaimRequest_v3election_2eproto}, {
      &scc_info_LeaderKey_v3election_2eproto.base,}};

static void InitDefaultsProclaimResponse_v3election_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v3electionpb::_ProclaimResponse_default_instance_;
    new (ptr) ::v3electionpb::ProclaimResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::ProclaimResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProclaimResponse_v3election_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProclaimResponse_v3election_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

void InitDefaults_v3election_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CampaignRequest_v3election_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CampaignResponse_v3election_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaderKey_v3election_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaderRequest_v3election_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaderResponse_v3election_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResignRequest_v3election_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResignResponse_v3election_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProclaimRequest_v3election_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProclaimResponse_v3election_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_v3election_2eproto[9];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_v3election_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_v3election_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_v3election_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::CampaignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::CampaignRequest, name_),
  PROTOBUF_FIELD_OFFSET(::v3electionpb::CampaignRequest, lease_),
  PROTOBUF_FIELD_OFFSET(::v3electionpb::CampaignRequest, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::CampaignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::CampaignResponse, header_),
  PROTOBUF_FIELD_OFFSET(::v3electionpb::CampaignResponse, leader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::LeaderKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::LeaderKey, name_),
  PROTOBUF_FIELD_OFFSET(::v3electionpb::LeaderKey, key_),
  PROTOBUF_FIELD_OFFSET(::v3electionpb::LeaderKey, rev_),
  PROTOBUF_FIELD_OFFSET(::v3electionpb::LeaderKey, lease_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::LeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::LeaderRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::LeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::LeaderResponse, header_),
  PROTOBUF_FIELD_OFFSET(::v3electionpb::LeaderResponse, kv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::ResignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::ResignRequest, leader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::ResignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::ResignResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::ProclaimRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::ProclaimRequest, leader_),
  PROTOBUF_FIELD_OFFSET(::v3electionpb::ProclaimRequest, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::ProclaimResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v3electionpb::ProclaimResponse, header_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::v3electionpb::CampaignRequest)},
  { 8, -1, sizeof(::v3electionpb::CampaignResponse)},
  { 15, -1, sizeof(::v3electionpb::LeaderKey)},
  { 24, -1, sizeof(::v3electionpb::LeaderRequest)},
  { 30, -1, sizeof(::v3electionpb::LeaderResponse)},
  { 37, -1, sizeof(::v3electionpb::ResignRequest)},
  { 43, -1, sizeof(::v3electionpb::ResignResponse)},
  { 49, -1, sizeof(::v3electionpb::ProclaimRequest)},
  { 56, -1, sizeof(::v3electionpb::ProclaimResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_CampaignRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_CampaignResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_LeaderKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_LeaderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_LeaderResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_ResignRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_ResignResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_ProclaimRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_ProclaimResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_v3election_2eproto = {
  {}, AddDescriptors_v3election_2eproto, "v3election.proto", schemas,
  file_default_instances, TableStruct_v3election_2eproto::offsets,
  file_level_metadata_v3election_2eproto, 9, file_level_enum_descriptors_v3election_2eproto, file_level_service_descriptors_v3election_2eproto,
};

const char descriptor_table_protodef_v3election_2eproto[] =
  "\n\020v3election.proto\022\014v3electionpb\032\ngogo.p"
  "roto\032\trpc.proto\032\010kv.proto\032\021annotations.p"
  "roto\"=\n\017CampaignRequest\022\014\n\004name\030\001 \001(\014\022\r\n"
  "\005lease\030\002 \001(\003\022\r\n\005value\030\003 \001(\014\"i\n\020CampaignR"
  "esponse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.R"
  "esponseHeader\022\'\n\006leader\030\002 \001(\0132\027.v3electi"
  "onpb.LeaderKey\"B\n\tLeaderKey\022\014\n\004name\030\001 \001("
  "\014\022\013\n\003key\030\002 \001(\014\022\013\n\003rev\030\003 \001(\003\022\r\n\005lease\030\004 \001"
  "(\003\"\035\n\rLeaderRequest\022\014\n\004name\030\001 \001(\014\"\\\n\016Lea"
  "derResponse\022,\n\006header\030\001 \001(\0132\034.etcdserver"
  "pb.ResponseHeader\022\034\n\002kv\030\002 \001(\0132\020.mvccpb.K"
  "eyValue\"8\n\rResignRequest\022\'\n\006leader\030\001 \001(\013"
  "2\027.v3electionpb.LeaderKey\">\n\016ResignRespo"
  "nse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Respo"
  "nseHeader\"I\n\017ProclaimRequest\022\'\n\006leader\030\001"
  " \001(\0132\027.v3electionpb.LeaderKey\022\r\n\005value\030\002"
  " \001(\014\"@\n\020ProclaimResponse\022,\n\006header\030\001 \001(\013"
  "2\034.etcdserverpb.ResponseHeader2\227\004\n\010Elect"
  "ion\022k\n\010Campaign\022\035.v3electionpb.CampaignR"
  "equest\032\036.v3electionpb.CampaignResponse\" "
  "\202\323\344\223\002\032\"\025/v3/election/campaign:\001*\022k\n\010Proc"
  "laim\022\035.v3electionpb.ProclaimRequest\032\036.v3"
  "electionpb.ProclaimResponse\" \202\323\344\223\002\032\"\025/v3"
  "/election/proclaim:\001*\022c\n\006Leader\022\033.v3elec"
  "tionpb.LeaderRequest\032\034.v3electionpb.Lead"
  "erResponse\"\036\202\323\344\223\002\030\"\023/v3/election/leader:"
  "\001*\022g\n\007Observe\022\033.v3electionpb.LeaderReque"
  "st\032\034.v3electionpb.LeaderResponse\"\037\202\323\344\223\002\031"
  "\"\024/v3/election/observe:\001*0\001\022c\n\006Resign\022\033."
  "v3electionpb.ResignRequest\032\034.v3electionp"
  "b.ResignResponse\"\036\202\323\344\223\002\030\"\023/v3/election/r"
  "esign:\001*B\010\310\342\036\001\320\342\036\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_v3election_2eproto = {
  false, InitDefaults_v3election_2eproto, 
  descriptor_table_protodef_v3election_2eproto,
  "v3election.proto", &assign_descriptors_table_v3election_2eproto, 1266,
};

void AddDescriptors_v3election_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[4] =
  {
    ::AddDescriptors_gogo_2eproto,
    ::AddDescriptors_rpc_2eproto,
    ::AddDescriptors_kv_2eproto,
    ::AddDescriptors_annotations_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_v3election_2eproto, deps, 4);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_v3election_2eproto = []() { AddDescriptors_v3election_2eproto(); return true; }();
namespace v3electionpb {

// ===================================================================

void CampaignRequest::InitAsDefaultInstance() {
}
class CampaignRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CampaignRequest::kNameFieldNumber;
const int CampaignRequest::kLeaseFieldNumber;
const int CampaignRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CampaignRequest::CampaignRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.CampaignRequest)
}
CampaignRequest::CampaignRequest(const CampaignRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  lease_ = from.lease_;
  // @@protoc_insertion_point(copy_constructor:v3electionpb.CampaignRequest)
}

void CampaignRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CampaignRequest_v3election_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lease_ = PROTOBUF_LONGLONG(0);
}

CampaignRequest::~CampaignRequest() {
  // @@protoc_insertion_point(destructor:v3electionpb.CampaignRequest)
  SharedDtor();
}

void CampaignRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CampaignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CampaignRequest& CampaignRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CampaignRequest_v3election_2eproto.base);
  return *internal_default_instance();
}


void CampaignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.CampaignRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lease_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CampaignRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CampaignRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 lease = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_lease(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CampaignRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.CampaignRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lease = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lease_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.CampaignRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.CampaignRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CampaignRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.CampaignRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // int64 lease = 2;
  if (this->lease() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->lease(), output);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.CampaignRequest)
}

::google::protobuf::uint8* CampaignRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.CampaignRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // int64 lease = 2;
  if (this->lease() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->lease(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.CampaignRequest)
  return target;
}

size_t CampaignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.CampaignRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // int64 lease = 2;
  if (this->lease() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lease());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CampaignRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.CampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CampaignRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CampaignRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.CampaignRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.CampaignRequest)
    MergeFrom(*source);
  }
}

void CampaignRequest::MergeFrom(const CampaignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.CampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.lease() != 0) {
    set_lease(from.lease());
  }
}

void CampaignRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.CampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampaignRequest::CopyFrom(const CampaignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.CampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampaignRequest::IsInitialized() const {
  return true;
}

void CampaignRequest::Swap(CampaignRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CampaignRequest::InternalSwap(CampaignRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lease_, other->lease_);
}

::google::protobuf::Metadata CampaignRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_v3election_2eproto);
  return ::file_level_metadata_v3election_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CampaignResponse::InitAsDefaultInstance() {
  ::v3electionpb::_CampaignResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  ::v3electionpb::_CampaignResponse_default_instance_._instance.get_mutable()->leader_ = const_cast< ::v3electionpb::LeaderKey*>(
      ::v3electionpb::LeaderKey::internal_default_instance());
}
class CampaignResponse::HasBitSetters {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const CampaignResponse* msg);
  static const ::v3electionpb::LeaderKey& leader(const CampaignResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
CampaignResponse::HasBitSetters::header(const CampaignResponse* msg) {
  return *msg->header_;
}
const ::v3electionpb::LeaderKey&
CampaignResponse::HasBitSetters::leader(const CampaignResponse* msg) {
  return *msg->leader_;
}
void CampaignResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CampaignResponse::kHeaderFieldNumber;
const int CampaignResponse::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CampaignResponse::CampaignResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.CampaignResponse)
}
CampaignResponse::CampaignResponse(const CampaignResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_leader()) {
    leader_ = new ::v3electionpb::LeaderKey(*from.leader_);
  } else {
    leader_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v3electionpb.CampaignResponse)
}

void CampaignResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CampaignResponse_v3election_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_) -
      reinterpret_cast<char*>(&header_)) + sizeof(leader_));
}

CampaignResponse::~CampaignResponse() {
  // @@protoc_insertion_point(destructor:v3electionpb.CampaignResponse)
  SharedDtor();
}

void CampaignResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete leader_;
}

void CampaignResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CampaignResponse& CampaignResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CampaignResponse_v3election_2eproto.base);
  return *internal_default_instance();
}


void CampaignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.CampaignResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CampaignResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CampaignResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::etcdserverpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .v3electionpb.LeaderKey leader = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::v3electionpb::LeaderKey::_InternalParse;
        object = msg->mutable_leader();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CampaignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.CampaignResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .v3electionpb.LeaderKey leader = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.CampaignResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.CampaignResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CampaignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.CampaignResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .v3electionpb.LeaderKey leader = 2;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::leader(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.CampaignResponse)
}

::google::protobuf::uint8* CampaignResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.CampaignResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // .v3electionpb.LeaderKey leader = 2;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::leader(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.CampaignResponse)
  return target;
}

size_t CampaignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.CampaignResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .v3electionpb.LeaderKey leader = 2;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CampaignResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.CampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CampaignResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CampaignResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.CampaignResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.CampaignResponse)
    MergeFrom(*source);
  }
}

void CampaignResponse::MergeFrom(const CampaignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.CampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_leader()) {
    mutable_leader()->::v3electionpb::LeaderKey::MergeFrom(from.leader());
  }
}

void CampaignResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.CampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampaignResponse::CopyFrom(const CampaignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.CampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampaignResponse::IsInitialized() const {
  return true;
}

void CampaignResponse::Swap(CampaignResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CampaignResponse::InternalSwap(CampaignResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(leader_, other->leader_);
}

::google::protobuf::Metadata CampaignResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_v3election_2eproto);
  return ::file_level_metadata_v3election_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LeaderKey::InitAsDefaultInstance() {
}
class LeaderKey::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderKey::kNameFieldNumber;
const int LeaderKey::kKeyFieldNumber;
const int LeaderKey::kRevFieldNumber;
const int LeaderKey::kLeaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderKey::LeaderKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.LeaderKey)
}
LeaderKey::LeaderKey(const LeaderKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&rev_, &from.rev_,
    static_cast<size_t>(reinterpret_cast<char*>(&lease_) -
    reinterpret_cast<char*>(&rev_)) + sizeof(lease_));
  // @@protoc_insertion_point(copy_constructor:v3electionpb.LeaderKey)
}

void LeaderKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LeaderKey_v3election_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&rev_)) + sizeof(lease_));
}

LeaderKey::~LeaderKey() {
  // @@protoc_insertion_point(destructor:v3electionpb.LeaderKey)
  SharedDtor();
}

void LeaderKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LeaderKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderKey& LeaderKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LeaderKey_v3election_2eproto.base);
  return *internal_default_instance();
}


void LeaderKey::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.LeaderKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&rev_)) + sizeof(lease_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LeaderKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LeaderKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 rev = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_rev(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 lease = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_lease(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LeaderKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.LeaderKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rev = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lease = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lease_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.LeaderKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.LeaderKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LeaderKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.LeaderKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // int64 rev = 3;
  if (this->rev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->rev(), output);
  }

  // int64 lease = 4;
  if (this->lease() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lease(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.LeaderKey)
}

::google::protobuf::uint8* LeaderKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.LeaderKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // int64 rev = 3;
  if (this->rev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->rev(), target);
  }

  // int64 lease = 4;
  if (this->lease() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lease(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.LeaderKey)
  return target;
}

size_t LeaderKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.LeaderKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // int64 rev = 3;
  if (this->rev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rev());
  }

  // int64 lease = 4;
  if (this->lease() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lease());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.LeaderKey)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderKey* source =
      ::google::protobuf::DynamicCastToGenerated<LeaderKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.LeaderKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.LeaderKey)
    MergeFrom(*source);
  }
}

void LeaderKey::MergeFrom(const LeaderKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.LeaderKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.rev() != 0) {
    set_rev(from.rev());
  }
  if (from.lease() != 0) {
    set_lease(from.lease());
  }
}

void LeaderKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.LeaderKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderKey::CopyFrom(const LeaderKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.LeaderKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderKey::IsInitialized() const {
  return true;
}

void LeaderKey::Swap(LeaderKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderKey::InternalSwap(LeaderKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rev_, other->rev_);
  swap(lease_, other->lease_);
}

::google::protobuf::Metadata LeaderKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_v3election_2eproto);
  return ::file_level_metadata_v3election_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LeaderRequest::InitAsDefaultInstance() {
}
class LeaderRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderRequest::LeaderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.LeaderRequest)
}
LeaderRequest::LeaderRequest(const LeaderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:v3electionpb.LeaderRequest)
}

void LeaderRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LeaderRequest_v3election_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LeaderRequest::~LeaderRequest() {
  // @@protoc_insertion_point(destructor:v3electionpb.LeaderRequest)
  SharedDtor();
}

void LeaderRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LeaderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderRequest& LeaderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LeaderRequest_v3election_2eproto.base);
  return *internal_default_instance();
}


void LeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.LeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LeaderRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LeaderRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.LeaderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.LeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.LeaderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.LeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.LeaderRequest)
}

::google::protobuf::uint8* LeaderRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.LeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.LeaderRequest)
  return target;
}

size_t LeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.LeaderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.LeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderRequest* source =
      ::google::protobuf::DynamicCastToGenerated<LeaderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.LeaderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.LeaderRequest)
    MergeFrom(*source);
  }
}

void LeaderRequest::MergeFrom(const LeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.LeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void LeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.LeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderRequest::CopyFrom(const LeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.LeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderRequest::IsInitialized() const {
  return true;
}

void LeaderRequest::Swap(LeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderRequest::InternalSwap(LeaderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LeaderRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_v3election_2eproto);
  return ::file_level_metadata_v3election_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LeaderResponse::InitAsDefaultInstance() {
  ::v3electionpb::_LeaderResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  ::v3electionpb::_LeaderResponse_default_instance_._instance.get_mutable()->kv_ = const_cast< ::mvccpb::KeyValue*>(
      ::mvccpb::KeyValue::internal_default_instance());
}
class LeaderResponse::HasBitSetters {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const LeaderResponse* msg);
  static const ::mvccpb::KeyValue& kv(const LeaderResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
LeaderResponse::HasBitSetters::header(const LeaderResponse* msg) {
  return *msg->header_;
}
const ::mvccpb::KeyValue&
LeaderResponse::HasBitSetters::kv(const LeaderResponse* msg) {
  return *msg->kv_;
}
void LeaderResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void LeaderResponse::clear_kv() {
  if (GetArenaNoVirtual() == nullptr && kv_ != nullptr) {
    delete kv_;
  }
  kv_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderResponse::kHeaderFieldNumber;
const int LeaderResponse::kKvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderResponse::LeaderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.LeaderResponse)
}
LeaderResponse::LeaderResponse(const LeaderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_kv()) {
    kv_ = new ::mvccpb::KeyValue(*from.kv_);
  } else {
    kv_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v3electionpb.LeaderResponse)
}

void LeaderResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LeaderResponse_v3election_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kv_) -
      reinterpret_cast<char*>(&header_)) + sizeof(kv_));
}

LeaderResponse::~LeaderResponse() {
  // @@protoc_insertion_point(destructor:v3electionpb.LeaderResponse)
  SharedDtor();
}

void LeaderResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete kv_;
}

void LeaderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderResponse& LeaderResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LeaderResponse_v3election_2eproto.base);
  return *internal_default_instance();
}


void LeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.LeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && kv_ != nullptr) {
    delete kv_;
  }
  kv_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LeaderResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LeaderResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::etcdserverpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .mvccpb.KeyValue kv = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mvccpb::KeyValue::_InternalParse;
        object = msg->mutable_kv();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.LeaderResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mvccpb.KeyValue kv = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.LeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.LeaderResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.LeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .mvccpb.KeyValue kv = 2;
  if (this->has_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::kv(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.LeaderResponse)
}

::google::protobuf::uint8* LeaderResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.LeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // .mvccpb.KeyValue kv = 2;
  if (this->has_kv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::kv(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.LeaderResponse)
  return target;
}

size_t LeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.LeaderResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .mvccpb.KeyValue kv = 2;
  if (this->has_kv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kv_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.LeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderResponse* source =
      ::google::protobuf::DynamicCastToGenerated<LeaderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.LeaderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.LeaderResponse)
    MergeFrom(*source);
  }
}

void LeaderResponse::MergeFrom(const LeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.LeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_kv()) {
    mutable_kv()->::mvccpb::KeyValue::MergeFrom(from.kv());
  }
}

void LeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.LeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderResponse::CopyFrom(const LeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.LeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderResponse::IsInitialized() const {
  return true;
}

void LeaderResponse::Swap(LeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderResponse::InternalSwap(LeaderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(kv_, other->kv_);
}

::google::protobuf::Metadata LeaderResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_v3election_2eproto);
  return ::file_level_metadata_v3election_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ResignRequest::InitAsDefaultInstance() {
  ::v3electionpb::_ResignRequest_default_instance_._instance.get_mutable()->leader_ = const_cast< ::v3electionpb::LeaderKey*>(
      ::v3electionpb::LeaderKey::internal_default_instance());
}
class ResignRequest::HasBitSetters {
 public:
  static const ::v3electionpb::LeaderKey& leader(const ResignRequest* msg);
};

const ::v3electionpb::LeaderKey&
ResignRequest::HasBitSetters::leader(const ResignRequest* msg) {
  return *msg->leader_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResignRequest::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResignRequest::ResignRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.ResignRequest)
}
ResignRequest::ResignRequest(const ResignRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leader()) {
    leader_ = new ::v3electionpb::LeaderKey(*from.leader_);
  } else {
    leader_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v3electionpb.ResignRequest)
}

void ResignRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResignRequest_v3election_2eproto.base);
  leader_ = nullptr;
}

ResignRequest::~ResignRequest() {
  // @@protoc_insertion_point(destructor:v3electionpb.ResignRequest)
  SharedDtor();
}

void ResignRequest::SharedDtor() {
  if (this != internal_default_instance()) delete leader_;
}

void ResignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResignRequest& ResignRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResignRequest_v3election_2eproto.base);
  return *internal_default_instance();
}


void ResignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.ResignRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResignRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResignRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .v3electionpb.LeaderKey leader = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::v3electionpb::LeaderKey::_InternalParse;
        object = msg->mutable_leader();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResignRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.ResignRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .v3electionpb.LeaderKey leader = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.ResignRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.ResignRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResignRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.ResignRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v3electionpb.LeaderKey leader = 1;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::leader(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.ResignRequest)
}

::google::protobuf::uint8* ResignRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.ResignRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v3electionpb.LeaderKey leader = 1;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::leader(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.ResignRequest)
  return target;
}

size_t ResignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.ResignRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .v3electionpb.LeaderKey leader = 1;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResignRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.ResignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResignRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ResignRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.ResignRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.ResignRequest)
    MergeFrom(*source);
  }
}

void ResignRequest::MergeFrom(const ResignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.ResignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leader()) {
    mutable_leader()->::v3electionpb::LeaderKey::MergeFrom(from.leader());
  }
}

void ResignRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.ResignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResignRequest::CopyFrom(const ResignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.ResignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResignRequest::IsInitialized() const {
  return true;
}

void ResignRequest::Swap(ResignRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResignRequest::InternalSwap(ResignRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(leader_, other->leader_);
}

::google::protobuf::Metadata ResignRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_v3election_2eproto);
  return ::file_level_metadata_v3election_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ResignResponse::InitAsDefaultInstance() {
  ::v3electionpb::_ResignResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class ResignResponse::HasBitSetters {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const ResignResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
ResignResponse::HasBitSetters::header(const ResignResponse* msg) {
  return *msg->header_;
}
void ResignResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResignResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResignResponse::ResignResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.ResignResponse)
}
ResignResponse::ResignResponse(const ResignResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v3electionpb.ResignResponse)
}

void ResignResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResignResponse_v3election_2eproto.base);
  header_ = nullptr;
}

ResignResponse::~ResignResponse() {
  // @@protoc_insertion_point(destructor:v3electionpb.ResignResponse)
  SharedDtor();
}

void ResignResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ResignResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResignResponse& ResignResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResignResponse_v3election_2eproto.base);
  return *internal_default_instance();
}


void ResignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.ResignResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResignResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResignResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::etcdserverpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.ResignResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.ResignResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.ResignResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.ResignResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.ResignResponse)
}

::google::protobuf::uint8* ResignResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.ResignResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.ResignResponse)
  return target;
}

size_t ResignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.ResignResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResignResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.ResignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResignResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ResignResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.ResignResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.ResignResponse)
    MergeFrom(*source);
  }
}

void ResignResponse::MergeFrom(const ResignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.ResignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ResignResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.ResignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResignResponse::CopyFrom(const ResignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.ResignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResignResponse::IsInitialized() const {
  return true;
}

void ResignResponse::Swap(ResignResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResignResponse::InternalSwap(ResignResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata ResignResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_v3election_2eproto);
  return ::file_level_metadata_v3election_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProclaimRequest::InitAsDefaultInstance() {
  ::v3electionpb::_ProclaimRequest_default_instance_._instance.get_mutable()->leader_ = const_cast< ::v3electionpb::LeaderKey*>(
      ::v3electionpb::LeaderKey::internal_default_instance());
}
class ProclaimRequest::HasBitSetters {
 public:
  static const ::v3electionpb::LeaderKey& leader(const ProclaimRequest* msg);
};

const ::v3electionpb::LeaderKey&
ProclaimRequest::HasBitSetters::leader(const ProclaimRequest* msg) {
  return *msg->leader_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProclaimRequest::kLeaderFieldNumber;
const int ProclaimRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProclaimRequest::ProclaimRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.ProclaimRequest)
}
ProclaimRequest::ProclaimRequest(const ProclaimRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_leader()) {
    leader_ = new ::v3electionpb::LeaderKey(*from.leader_);
  } else {
    leader_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v3electionpb.ProclaimRequest)
}

void ProclaimRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProclaimRequest_v3election_2eproto.base);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_ = nullptr;
}

ProclaimRequest::~ProclaimRequest() {
  // @@protoc_insertion_point(destructor:v3electionpb.ProclaimRequest)
  SharedDtor();
}

void ProclaimRequest::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete leader_;
}

void ProclaimRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProclaimRequest& ProclaimRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProclaimRequest_v3election_2eproto.base);
  return *internal_default_instance();
}


void ProclaimRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.ProclaimRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProclaimRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProclaimRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .v3electionpb.LeaderKey leader = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::v3electionpb::LeaderKey::_InternalParse;
        object = msg->mutable_leader();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProclaimRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.ProclaimRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .v3electionpb.LeaderKey leader = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.ProclaimRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.ProclaimRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProclaimRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.ProclaimRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v3electionpb.LeaderKey leader = 1;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::leader(this), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.ProclaimRequest)
}

::google::protobuf::uint8* ProclaimRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.ProclaimRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v3electionpb.LeaderKey leader = 1;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::leader(this), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.ProclaimRequest)
  return target;
}

size_t ProclaimRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.ProclaimRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .v3electionpb.LeaderKey leader = 1;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProclaimRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.ProclaimRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProclaimRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ProclaimRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.ProclaimRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.ProclaimRequest)
    MergeFrom(*source);
  }
}

void ProclaimRequest::MergeFrom(const ProclaimRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.ProclaimRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_leader()) {
    mutable_leader()->::v3electionpb::LeaderKey::MergeFrom(from.leader());
  }
}

void ProclaimRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.ProclaimRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProclaimRequest::CopyFrom(const ProclaimRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.ProclaimRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProclaimRequest::IsInitialized() const {
  return true;
}

void ProclaimRequest::Swap(ProclaimRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProclaimRequest::InternalSwap(ProclaimRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(leader_, other->leader_);
}

::google::protobuf::Metadata ProclaimRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_v3election_2eproto);
  return ::file_level_metadata_v3election_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProclaimResponse::InitAsDefaultInstance() {
  ::v3electionpb::_ProclaimResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class ProclaimResponse::HasBitSetters {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const ProclaimResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
ProclaimResponse::HasBitSetters::header(const ProclaimResponse* msg) {
  return *msg->header_;
}
void ProclaimResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProclaimResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProclaimResponse::ProclaimResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.ProclaimResponse)
}
ProclaimResponse::ProclaimResponse(const ProclaimResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v3electionpb.ProclaimResponse)
}

void ProclaimResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProclaimResponse_v3election_2eproto.base);
  header_ = nullptr;
}

ProclaimResponse::~ProclaimResponse() {
  // @@protoc_insertion_point(destructor:v3electionpb.ProclaimResponse)
  SharedDtor();
}

void ProclaimResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ProclaimResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProclaimResponse& ProclaimResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProclaimResponse_v3election_2eproto.base);
  return *internal_default_instance();
}


void ProclaimResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.ProclaimResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProclaimResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProclaimResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::etcdserverpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProclaimResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.ProclaimResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.ProclaimResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.ProclaimResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProclaimResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.ProclaimResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.ProclaimResponse)
}

::google::protobuf::uint8* ProclaimResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.ProclaimResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.ProclaimResponse)
  return target;
}

size_t ProclaimResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.ProclaimResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProclaimResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.ProclaimResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProclaimResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ProclaimResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.ProclaimResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.ProclaimResponse)
    MergeFrom(*source);
  }
}

void ProclaimResponse::MergeFrom(const ProclaimResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.ProclaimResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ProclaimResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.ProclaimResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProclaimResponse::CopyFrom(const ProclaimResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.ProclaimResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProclaimResponse::IsInitialized() const {
  return true;
}

void ProclaimResponse::Swap(ProclaimResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProclaimResponse::InternalSwap(ProclaimResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata ProclaimResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_v3election_2eproto);
  return ::file_level_metadata_v3election_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v3electionpb
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::v3electionpb::CampaignRequest* Arena::CreateMaybeMessage< ::v3electionpb::CampaignRequest >(Arena* arena) {
  return Arena::CreateInternal< ::v3electionpb::CampaignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v3electionpb::CampaignResponse* Arena::CreateMaybeMessage< ::v3electionpb::CampaignResponse >(Arena* arena) {
  return Arena::CreateInternal< ::v3electionpb::CampaignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::v3electionpb::LeaderKey* Arena::CreateMaybeMessage< ::v3electionpb::LeaderKey >(Arena* arena) {
  return Arena::CreateInternal< ::v3electionpb::LeaderKey >(arena);
}
template<> PROTOBUF_NOINLINE ::v3electionpb::LeaderRequest* Arena::CreateMaybeMessage< ::v3electionpb::LeaderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::v3electionpb::LeaderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v3electionpb::LeaderResponse* Arena::CreateMaybeMessage< ::v3electionpb::LeaderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::v3electionpb::LeaderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::v3electionpb::ResignRequest* Arena::CreateMaybeMessage< ::v3electionpb::ResignRequest >(Arena* arena) {
  return Arena::CreateInternal< ::v3electionpb::ResignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v3electionpb::ResignResponse* Arena::CreateMaybeMessage< ::v3electionpb::ResignResponse >(Arena* arena) {
  return Arena::CreateInternal< ::v3electionpb::ResignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::v3electionpb::ProclaimRequest* Arena::CreateMaybeMessage< ::v3electionpb::ProclaimRequest >(Arena* arena) {
  return Arena::CreateInternal< ::v3electionpb::ProclaimRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v3electionpb::ProclaimResponse* Arena::CreateMaybeMessage< ::v3electionpb::ProclaimResponse >(Arena* arena) {
  return Arena::CreateInternal< ::v3electionpb::ProclaimResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
