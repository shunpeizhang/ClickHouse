// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v3election.proto
#ifndef GRPC_v3election_2eproto__INCLUDED
#define GRPC_v3election_2eproto__INCLUDED

#include "v3election.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/client_context.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace v3electionpb {

// The election service exposes client-side election facilities as a gRPC interface.
class Election final {
 public:
  static constexpr char const* service_full_name() {
    return "v3electionpb.Election";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Campaign waits to acquire leadership in an election, returning a LeaderKey
    // representing the leadership if successful. The LeaderKey can then be used
    // to issue new values on the election, transactionally guard API requests on
    // leadership still being held, and resign from the election.
    virtual ::grpc::Status Campaign(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest& request, ::v3electionpb::CampaignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::CampaignResponse>> AsyncCampaign(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::CampaignResponse>>(AsyncCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::CampaignResponse>> PrepareAsyncCampaign(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::CampaignResponse>>(PrepareAsyncCampaignRaw(context, request, cq));
    }
    // Proclaim updates the leader's posted value with a new value.
    virtual ::grpc::Status Proclaim(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest& request, ::v3electionpb::ProclaimResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::ProclaimResponse>> AsyncProclaim(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::ProclaimResponse>>(AsyncProclaimRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::ProclaimResponse>> PrepareAsyncProclaim(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::ProclaimResponse>>(PrepareAsyncProclaimRaw(context, request, cq));
    }
    // Leader returns the current election proclamation, if any.
    virtual ::grpc::Status Leader(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::v3electionpb::LeaderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::LeaderResponse>> AsyncLeader(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::LeaderResponse>>(AsyncLeaderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::LeaderResponse>> PrepareAsyncLeader(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::LeaderResponse>>(PrepareAsyncLeaderRaw(context, request, cq));
    }
    // Observe streams election proclamations in-order as made by the election's
    // elected leaders.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::v3electionpb::LeaderResponse>> Observe(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::v3electionpb::LeaderResponse>>(ObserveRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::v3electionpb::LeaderResponse>> AsyncObserve(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::v3electionpb::LeaderResponse>>(AsyncObserveRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::v3electionpb::LeaderResponse>> PrepareAsyncObserve(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::v3electionpb::LeaderResponse>>(PrepareAsyncObserveRaw(context, request, cq));
    }
    // Resign releases election leadership so other campaigners may acquire
    // leadership on the election.
    virtual ::grpc::Status Resign(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest& request, ::v3electionpb::ResignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::ResignResponse>> AsyncResign(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::ResignResponse>>(AsyncResignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::ResignResponse>> PrepareAsyncResign(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::ResignResponse>>(PrepareAsyncResignRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Campaign waits to acquire leadership in an election, returning a LeaderKey
      // representing the leadership if successful. The LeaderKey can then be used
      // to issue new values on the election, transactionally guard API requests on
      // leadership still being held, and resign from the election.
      virtual void Campaign(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest* request, ::v3electionpb::CampaignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Campaign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::CampaignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Campaign(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest* request, ::v3electionpb::CampaignResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Campaign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::CampaignResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Proclaim updates the leader's posted value with a new value.
      virtual void Proclaim(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest* request, ::v3electionpb::ProclaimResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Proclaim(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::ProclaimResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Proclaim(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest* request, ::v3electionpb::ProclaimResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Proclaim(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::ProclaimResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Leader returns the current election proclamation, if any.
      virtual void Leader(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest* request, ::v3electionpb::LeaderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Leader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::LeaderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Leader(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest* request, ::v3electionpb::LeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Leader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::LeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Observe streams election proclamations in-order as made by the election's
      // elected leaders.
      virtual void Observe(::grpc::ClientContext* context, ::v3electionpb::LeaderRequest* request, ::grpc::experimental::ClientReadReactor< ::v3electionpb::LeaderResponse>* reactor) = 0;
      // Resign releases election leadership so other campaigners may acquire
      // leadership on the election.
      virtual void Resign(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest* request, ::v3electionpb::ResignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Resign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::ResignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Resign(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest* request, ::v3electionpb::ResignResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Resign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::ResignResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::CampaignResponse>* AsyncCampaignRaw(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::CampaignResponse>* PrepareAsyncCampaignRaw(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::ProclaimResponse>* AsyncProclaimRaw(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::ProclaimResponse>* PrepareAsyncProclaimRaw(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::LeaderResponse>* AsyncLeaderRaw(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::LeaderResponse>* PrepareAsyncLeaderRaw(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::v3electionpb::LeaderResponse>* ObserveRaw(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::v3electionpb::LeaderResponse>* AsyncObserveRaw(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::v3electionpb::LeaderResponse>* PrepareAsyncObserveRaw(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::ResignResponse>* AsyncResignRaw(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3electionpb::ResignResponse>* PrepareAsyncResignRaw(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Campaign(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest& request, ::v3electionpb::CampaignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::CampaignResponse>> AsyncCampaign(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::CampaignResponse>>(AsyncCampaignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::CampaignResponse>> PrepareAsyncCampaign(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::CampaignResponse>>(PrepareAsyncCampaignRaw(context, request, cq));
    }
    ::grpc::Status Proclaim(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest& request, ::v3electionpb::ProclaimResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::ProclaimResponse>> AsyncProclaim(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::ProclaimResponse>>(AsyncProclaimRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::ProclaimResponse>> PrepareAsyncProclaim(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::ProclaimResponse>>(PrepareAsyncProclaimRaw(context, request, cq));
    }
    ::grpc::Status Leader(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::v3electionpb::LeaderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::LeaderResponse>> AsyncLeader(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::LeaderResponse>>(AsyncLeaderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::LeaderResponse>> PrepareAsyncLeader(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::LeaderResponse>>(PrepareAsyncLeaderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::v3electionpb::LeaderResponse>> Observe(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::v3electionpb::LeaderResponse>>(ObserveRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::v3electionpb::LeaderResponse>> AsyncObserve(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::v3electionpb::LeaderResponse>>(AsyncObserveRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::v3electionpb::LeaderResponse>> PrepareAsyncObserve(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::v3electionpb::LeaderResponse>>(PrepareAsyncObserveRaw(context, request, cq));
    }
    ::grpc::Status Resign(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest& request, ::v3electionpb::ResignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::ResignResponse>> AsyncResign(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::ResignResponse>>(AsyncResignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::ResignResponse>> PrepareAsyncResign(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3electionpb::ResignResponse>>(PrepareAsyncResignRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Campaign(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest* request, ::v3electionpb::CampaignResponse* response, std::function<void(::grpc::Status)>) override;
      void Campaign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::CampaignResponse* response, std::function<void(::grpc::Status)>) override;
      void Campaign(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest* request, ::v3electionpb::CampaignResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Campaign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::CampaignResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Proclaim(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest* request, ::v3electionpb::ProclaimResponse* response, std::function<void(::grpc::Status)>) override;
      void Proclaim(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::ProclaimResponse* response, std::function<void(::grpc::Status)>) override;
      void Proclaim(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest* request, ::v3electionpb::ProclaimResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Proclaim(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::ProclaimResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Leader(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest* request, ::v3electionpb::LeaderResponse* response, std::function<void(::grpc::Status)>) override;
      void Leader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::LeaderResponse* response, std::function<void(::grpc::Status)>) override;
      void Leader(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest* request, ::v3electionpb::LeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Leader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::LeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Observe(::grpc::ClientContext* context, ::v3electionpb::LeaderRequest* request, ::grpc::experimental::ClientReadReactor< ::v3electionpb::LeaderResponse>* reactor) override;
      void Resign(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest* request, ::v3electionpb::ResignResponse* response, std::function<void(::grpc::Status)>) override;
      void Resign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::ResignResponse* response, std::function<void(::grpc::Status)>) override;
      void Resign(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest* request, ::v3electionpb::ResignResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Resign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3electionpb::ResignResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::v3electionpb::CampaignResponse>* AsyncCampaignRaw(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v3electionpb::CampaignResponse>* PrepareAsyncCampaignRaw(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v3electionpb::ProclaimResponse>* AsyncProclaimRaw(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v3electionpb::ProclaimResponse>* PrepareAsyncProclaimRaw(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v3electionpb::LeaderResponse>* AsyncLeaderRaw(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v3electionpb::LeaderResponse>* PrepareAsyncLeaderRaw(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::v3electionpb::LeaderResponse>* ObserveRaw(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request) override;
    ::grpc::ClientAsyncReader< ::v3electionpb::LeaderResponse>* AsyncObserveRaw(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::v3electionpb::LeaderResponse>* PrepareAsyncObserveRaw(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v3electionpb::ResignResponse>* AsyncResignRaw(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v3electionpb::ResignResponse>* PrepareAsyncResignRaw(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Campaign_;
    const ::grpc::internal::RpcMethod rpcmethod_Proclaim_;
    const ::grpc::internal::RpcMethod rpcmethod_Leader_;
    const ::grpc::internal::RpcMethod rpcmethod_Observe_;
    const ::grpc::internal::RpcMethod rpcmethod_Resign_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Campaign waits to acquire leadership in an election, returning a LeaderKey
    // representing the leadership if successful. The LeaderKey can then be used
    // to issue new values on the election, transactionally guard API requests on
    // leadership still being held, and resign from the election.
    virtual ::grpc::Status Campaign(::grpc::ServerContext* context, const ::v3electionpb::CampaignRequest* request, ::v3electionpb::CampaignResponse* response);
    // Proclaim updates the leader's posted value with a new value.
    virtual ::grpc::Status Proclaim(::grpc::ServerContext* context, const ::v3electionpb::ProclaimRequest* request, ::v3electionpb::ProclaimResponse* response);
    // Leader returns the current election proclamation, if any.
    virtual ::grpc::Status Leader(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::v3electionpb::LeaderResponse* response);
    // Observe streams election proclamations in-order as made by the election's
    // elected leaders.
    virtual ::grpc::Status Observe(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::grpc::ServerWriter< ::v3electionpb::LeaderResponse>* writer);
    // Resign releases election leadership so other campaigners may acquire
    // leadership on the election.
    virtual ::grpc::Status Resign(::grpc::ServerContext* context, const ::v3electionpb::ResignRequest* request, ::v3electionpb::ResignResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Campaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Campaign() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Campaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Campaign(::grpc::ServerContext* context, const ::v3electionpb::CampaignRequest* request, ::v3electionpb::CampaignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCampaign(::grpc::ServerContext* context, ::v3electionpb::CampaignRequest* request, ::grpc::ServerAsyncResponseWriter< ::v3electionpb::CampaignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Proclaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Proclaim() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Proclaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proclaim(::grpc::ServerContext* context, const ::v3electionpb::ProclaimRequest* request, ::v3electionpb::ProclaimResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProclaim(::grpc::ServerContext* context, ::v3electionpb::ProclaimRequest* request, ::grpc::ServerAsyncResponseWriter< ::v3electionpb::ProclaimResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Leader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Leader() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Leader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Leader(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::v3electionpb::LeaderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeader(::grpc::ServerContext* context, ::v3electionpb::LeaderRequest* request, ::grpc::ServerAsyncResponseWriter< ::v3electionpb::LeaderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Observe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Observe() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Observe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Observe(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::grpc::ServerWriter< ::v3electionpb::LeaderResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestObserve(::grpc::ServerContext* context, ::v3electionpb::LeaderRequest* request, ::grpc::ServerAsyncWriter< ::v3electionpb::LeaderResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Resign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Resign() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Resign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Resign(::grpc::ServerContext* context, const ::v3electionpb::ResignRequest* request, ::v3electionpb::ResignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResign(::grpc::ServerContext* context, ::v3electionpb::ResignRequest* request, ::grpc::ServerAsyncResponseWriter< ::v3electionpb::ResignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Campaign<WithAsyncMethod_Proclaim<WithAsyncMethod_Leader<WithAsyncMethod_Observe<WithAsyncMethod_Resign<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Campaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Campaign() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::v3electionpb::CampaignRequest, ::v3electionpb::CampaignResponse>(
          [this](::grpc::ServerContext* context,
                 const ::v3electionpb::CampaignRequest* request,
                 ::v3electionpb::CampaignResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Campaign(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Campaign(
        ::grpc::experimental::MessageAllocator< ::v3electionpb::CampaignRequest, ::v3electionpb::CampaignResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v3electionpb::CampaignRequest, ::v3electionpb::CampaignResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Campaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Campaign(::grpc::ServerContext* context, const ::v3electionpb::CampaignRequest* request, ::v3electionpb::CampaignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Campaign(::grpc::ServerContext* context, const ::v3electionpb::CampaignRequest* request, ::v3electionpb::CampaignResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Proclaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Proclaim() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::v3electionpb::ProclaimRequest, ::v3electionpb::ProclaimResponse>(
          [this](::grpc::ServerContext* context,
                 const ::v3electionpb::ProclaimRequest* request,
                 ::v3electionpb::ProclaimResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Proclaim(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Proclaim(
        ::grpc::experimental::MessageAllocator< ::v3electionpb::ProclaimRequest, ::v3electionpb::ProclaimResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v3electionpb::ProclaimRequest, ::v3electionpb::ProclaimResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Proclaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proclaim(::grpc::ServerContext* context, const ::v3electionpb::ProclaimRequest* request, ::v3electionpb::ProclaimResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Proclaim(::grpc::ServerContext* context, const ::v3electionpb::ProclaimRequest* request, ::v3electionpb::ProclaimResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Leader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Leader() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::v3electionpb::LeaderRequest, ::v3electionpb::LeaderResponse>(
          [this](::grpc::ServerContext* context,
                 const ::v3electionpb::LeaderRequest* request,
                 ::v3electionpb::LeaderResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Leader(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Leader(
        ::grpc::experimental::MessageAllocator< ::v3electionpb::LeaderRequest, ::v3electionpb::LeaderResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v3electionpb::LeaderRequest, ::v3electionpb::LeaderResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Leader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Leader(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::v3electionpb::LeaderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Leader(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::v3electionpb::LeaderResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Observe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Observe() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackServerStreamingHandler< ::v3electionpb::LeaderRequest, ::v3electionpb::LeaderResponse>(
          [this] { return this->Observe(); }));
    }
    ~ExperimentalWithCallbackMethod_Observe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Observe(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::grpc::ServerWriter< ::v3electionpb::LeaderResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::v3electionpb::LeaderRequest, ::v3electionpb::LeaderResponse>* Observe() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::v3electionpb::LeaderRequest, ::v3electionpb::LeaderResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Resign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Resign() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::v3electionpb::ResignRequest, ::v3electionpb::ResignResponse>(
          [this](::grpc::ServerContext* context,
                 const ::v3electionpb::ResignRequest* request,
                 ::v3electionpb::ResignResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Resign(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Resign(
        ::grpc::experimental::MessageAllocator< ::v3electionpb::ResignRequest, ::v3electionpb::ResignResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v3electionpb::ResignRequest, ::v3electionpb::ResignResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Resign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Resign(::grpc::ServerContext* context, const ::v3electionpb::ResignRequest* request, ::v3electionpb::ResignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Resign(::grpc::ServerContext* context, const ::v3electionpb::ResignRequest* request, ::v3electionpb::ResignResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Campaign<ExperimentalWithCallbackMethod_Proclaim<ExperimentalWithCallbackMethod_Leader<ExperimentalWithCallbackMethod_Observe<ExperimentalWithCallbackMethod_Resign<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Campaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Campaign() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Campaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Campaign(::grpc::ServerContext* context, const ::v3electionpb::CampaignRequest* request, ::v3electionpb::CampaignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Proclaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Proclaim() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Proclaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proclaim(::grpc::ServerContext* context, const ::v3electionpb::ProclaimRequest* request, ::v3electionpb::ProclaimResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Leader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Leader() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Leader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Leader(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::v3electionpb::LeaderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Observe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Observe() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Observe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Observe(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::grpc::ServerWriter< ::v3electionpb::LeaderResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Resign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Resign() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Resign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Resign(::grpc::ServerContext* context, const ::v3electionpb::ResignRequest* request, ::v3electionpb::ResignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Campaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Campaign() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Campaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Campaign(::grpc::ServerContext* context, const ::v3electionpb::CampaignRequest* request, ::v3electionpb::CampaignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCampaign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Proclaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Proclaim() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Proclaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proclaim(::grpc::ServerContext* context, const ::v3electionpb::ProclaimRequest* request, ::v3electionpb::ProclaimResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProclaim(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Leader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Leader() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Leader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Leader(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::v3electionpb::LeaderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeader(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Observe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Observe() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Observe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Observe(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::grpc::ServerWriter< ::v3electionpb::LeaderResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestObserve(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Resign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Resign() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Resign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Resign(::grpc::ServerContext* context, const ::v3electionpb::ResignRequest* request, ::v3electionpb::ResignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Campaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Campaign() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Campaign(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Campaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Campaign(::grpc::ServerContext* context, const ::v3electionpb::CampaignRequest* request, ::v3electionpb::CampaignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Campaign(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Proclaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Proclaim() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Proclaim(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Proclaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proclaim(::grpc::ServerContext* context, const ::v3electionpb::ProclaimRequest* request, ::v3electionpb::ProclaimResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Proclaim(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Leader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Leader() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Leader(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Leader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Leader(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::v3electionpb::LeaderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Leader(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Observe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Observe() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Observe(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Observe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Observe(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::grpc::ServerWriter< ::v3electionpb::LeaderResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Observe() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Resign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Resign() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Resign(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Resign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Resign(::grpc::ServerContext* context, const ::v3electionpb::ResignRequest* request, ::v3electionpb::ResignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Resign(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Campaign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Campaign() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::v3electionpb::CampaignRequest, ::v3electionpb::CampaignResponse>(std::bind(&WithStreamedUnaryMethod_Campaign<BaseClass>::StreamedCampaign, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Campaign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Campaign(::grpc::ServerContext* context, const ::v3electionpb::CampaignRequest* request, ::v3electionpb::CampaignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCampaign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v3electionpb::CampaignRequest,::v3electionpb::CampaignResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Proclaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Proclaim() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::v3electionpb::ProclaimRequest, ::v3electionpb::ProclaimResponse>(std::bind(&WithStreamedUnaryMethod_Proclaim<BaseClass>::StreamedProclaim, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Proclaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Proclaim(::grpc::ServerContext* context, const ::v3electionpb::ProclaimRequest* request, ::v3electionpb::ProclaimResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProclaim(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v3electionpb::ProclaimRequest,::v3electionpb::ProclaimResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Leader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Leader() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::v3electionpb::LeaderRequest, ::v3electionpb::LeaderResponse>(std::bind(&WithStreamedUnaryMethod_Leader<BaseClass>::StreamedLeader, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Leader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Leader(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::v3electionpb::LeaderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLeader(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v3electionpb::LeaderRequest,::v3electionpb::LeaderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Resign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Resign() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::v3electionpb::ResignRequest, ::v3electionpb::ResignResponse>(std::bind(&WithStreamedUnaryMethod_Resign<BaseClass>::StreamedResign, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Resign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Resign(::grpc::ServerContext* context, const ::v3electionpb::ResignRequest* request, ::v3electionpb::ResignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v3electionpb::ResignRequest,::v3electionpb::ResignResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Campaign<WithStreamedUnaryMethod_Proclaim<WithStreamedUnaryMethod_Leader<WithStreamedUnaryMethod_Resign<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Observe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Observe() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler< ::v3electionpb::LeaderRequest, ::v3electionpb::LeaderResponse>(std::bind(&WithSplitStreamingMethod_Observe<BaseClass>::StreamedObserve, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Observe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Observe(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::grpc::ServerWriter< ::v3electionpb::LeaderResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedObserve(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::v3electionpb::LeaderRequest,::v3electionpb::LeaderResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Observe<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Campaign<WithStreamedUnaryMethod_Proclaim<WithStreamedUnaryMethod_Leader<WithSplitStreamingMethod_Observe<WithStreamedUnaryMethod_Resign<Service > > > > > StreamedService;
};

}  // namespace v3electionpb


#endif  // GRPC_v3election_2eproto__INCLUDED
