// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lease.proto

#include "lease.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LeaseTimeToLiveRequest_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LeaseTimeToLiveResponse_rpc_2eproto;
namespace leasepb {
class LeaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lease> _instance;
} _Lease_default_instance_;
class LeaseInternalRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaseInternalRequest> _instance;
} _LeaseInternalRequest_default_instance_;
class LeaseInternalResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaseInternalResponse> _instance;
} _LeaseInternalResponse_default_instance_;
}  // namespace leasepb
static void InitDefaultsLease_lease_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::leasepb::_Lease_default_instance_;
    new (ptr) ::leasepb::Lease();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::leasepb::Lease::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Lease_lease_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLease_lease_2eproto}, {}};

static void InitDefaultsLeaseInternalRequest_lease_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::leasepb::_LeaseInternalRequest_default_instance_;
    new (ptr) ::leasepb::LeaseInternalRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::leasepb::LeaseInternalRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LeaseInternalRequest_lease_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLeaseInternalRequest_lease_2eproto}, {
      &scc_info_LeaseTimeToLiveRequest_rpc_2eproto.base,}};

static void InitDefaultsLeaseInternalResponse_lease_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::leasepb::_LeaseInternalResponse_default_instance_;
    new (ptr) ::leasepb::LeaseInternalResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::leasepb::LeaseInternalResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LeaseInternalResponse_lease_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLeaseInternalResponse_lease_2eproto}, {
      &scc_info_LeaseTimeToLiveResponse_rpc_2eproto.base,}};

void InitDefaults_lease_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Lease_lease_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaseInternalRequest_lease_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaseInternalResponse_lease_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_lease_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_lease_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_lease_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_lease_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::leasepb::Lease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::leasepb::Lease, id_),
  PROTOBUF_FIELD_OFFSET(::leasepb::Lease, ttl_),
  PROTOBUF_FIELD_OFFSET(::leasepb::Lease, remainingttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::leasepb::LeaseInternalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::leasepb::LeaseInternalRequest, leasetimetoliverequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::leasepb::LeaseInternalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::leasepb::LeaseInternalResponse, leasetimetoliveresponse_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::leasepb::Lease)},
  { 8, -1, sizeof(::leasepb::LeaseInternalRequest)},
  { 14, -1, sizeof(::leasepb::LeaseInternalResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::leasepb::_Lease_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::leasepb::_LeaseInternalRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::leasepb::_LeaseInternalResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_lease_2eproto = {
  {}, AddDescriptors_lease_2eproto, "lease.proto", schemas,
  file_default_instances, TableStruct_lease_2eproto::offsets,
  file_level_metadata_lease_2eproto, 3, file_level_enum_descriptors_lease_2eproto, file_level_service_descriptors_lease_2eproto,
};

const char descriptor_table_protodef_lease_2eproto[] =
  "\n\013lease.proto\022\007leasepb\032\ngogo.proto\032\trpc."
  "proto\"6\n\005Lease\022\n\n\002ID\030\001 \001(\003\022\013\n\003TTL\030\002 \001(\003\022"
  "\024\n\014RemainingTTL\030\003 \001(\003\"\\\n\024LeaseInternalRe"
  "quest\022D\n\026LeaseTimeToLiveRequest\030\001 \001(\0132$."
  "etcdserverpb.LeaseTimeToLiveRequest\"_\n\025L"
  "easeInternalResponse\022F\n\027LeaseTimeToLiveR"
  "esponse\030\001 \001(\0132%.etcdserverpb.LeaseTimeTo"
  "LiveResponseB\024\310\342\036\001\340\342\036\001\320\342\036\001\310\341\036\000\320\341\036\000b\006prot"
  "o3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_lease_2eproto = {
  false, InitDefaults_lease_2eproto, 
  descriptor_table_protodef_lease_2eproto,
  "lease.proto", &assign_descriptors_table_lease_2eproto, 322,
};

void AddDescriptors_lease_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_gogo_2eproto,
    ::AddDescriptors_rpc_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_lease_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lease_2eproto = []() { AddDescriptors_lease_2eproto(); return true; }();
namespace leasepb {

// ===================================================================

void Lease::InitAsDefaultInstance() {
}
class Lease::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lease::kIDFieldNumber;
const int Lease::kTTLFieldNumber;
const int Lease::kRemainingTTLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lease::Lease()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:leasepb.Lease)
}
Lease::Lease(const Lease& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&remainingttl_) -
    reinterpret_cast<char*>(&id_)) + sizeof(remainingttl_));
  // @@protoc_insertion_point(copy_constructor:leasepb.Lease)
}

void Lease::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remainingttl_) -
      reinterpret_cast<char*>(&id_)) + sizeof(remainingttl_));
}

Lease::~Lease() {
  // @@protoc_insertion_point(destructor:leasepb.Lease)
  SharedDtor();
}

void Lease::SharedDtor() {
}

void Lease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lease& Lease::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Lease_lease_2eproto.base);
  return *internal_default_instance();
}


void Lease::Clear() {
// @@protoc_insertion_point(message_clear_start:leasepb.Lease)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remainingttl_) -
      reinterpret_cast<char*>(&id_)) + sizeof(remainingttl_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Lease::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Lease*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 ID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 TTL = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ttl(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 RemainingTTL = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_remainingttl(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Lease::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:leasepb.Lease)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TTL = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 RemainingTTL = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &remainingttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:leasepb.Lease)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:leasepb.Lease)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Lease::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:leasepb.Lease)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // int64 TTL = 2;
  if (this->ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ttl(), output);
  }

  // int64 RemainingTTL = 3;
  if (this->remainingttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->remainingttl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:leasepb.Lease)
}

::google::protobuf::uint8* Lease::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:leasepb.Lease)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // int64 TTL = 2;
  if (this->ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ttl(), target);
  }

  // int64 RemainingTTL = 3;
  if (this->remainingttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->remainingttl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:leasepb.Lease)
  return target;
}

size_t Lease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:leasepb.Lease)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 TTL = 2;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ttl());
  }

  // int64 RemainingTTL = 3;
  if (this->remainingttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->remainingttl());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lease::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:leasepb.Lease)
  GOOGLE_DCHECK_NE(&from, this);
  const Lease* source =
      ::google::protobuf::DynamicCastToGenerated<Lease>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:leasepb.Lease)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:leasepb.Lease)
    MergeFrom(*source);
  }
}

void Lease::MergeFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:leasepb.Lease)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.ttl() != 0) {
    set_ttl(from.ttl());
  }
  if (from.remainingttl() != 0) {
    set_remainingttl(from.remainingttl());
  }
}

void Lease::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:leasepb.Lease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lease::CopyFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:leasepb.Lease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lease::IsInitialized() const {
  return true;
}

void Lease::Swap(Lease* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lease::InternalSwap(Lease* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(ttl_, other->ttl_);
  swap(remainingttl_, other->remainingttl_);
}

::google::protobuf::Metadata Lease::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lease_2eproto);
  return ::file_level_metadata_lease_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LeaseInternalRequest::InitAsDefaultInstance() {
  ::leasepb::_LeaseInternalRequest_default_instance_._instance.get_mutable()->leasetimetoliverequest_ = const_cast< ::etcdserverpb::LeaseTimeToLiveRequest*>(
      ::etcdserverpb::LeaseTimeToLiveRequest::internal_default_instance());
}
class LeaseInternalRequest::HasBitSetters {
 public:
  static const ::etcdserverpb::LeaseTimeToLiveRequest& leasetimetoliverequest(const LeaseInternalRequest* msg);
};

const ::etcdserverpb::LeaseTimeToLiveRequest&
LeaseInternalRequest::HasBitSetters::leasetimetoliverequest(const LeaseInternalRequest* msg) {
  return *msg->leasetimetoliverequest_;
}
void LeaseInternalRequest::clear_leasetimetoliverequest() {
  if (GetArenaNoVirtual() == nullptr && leasetimetoliverequest_ != nullptr) {
    delete leasetimetoliverequest_;
  }
  leasetimetoliverequest_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaseInternalRequest::kLeaseTimeToLiveRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaseInternalRequest::LeaseInternalRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:leasepb.LeaseInternalRequest)
}
LeaseInternalRequest::LeaseInternalRequest(const LeaseInternalRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leasetimetoliverequest()) {
    leasetimetoliverequest_ = new ::etcdserverpb::LeaseTimeToLiveRequest(*from.leasetimetoliverequest_);
  } else {
    leasetimetoliverequest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:leasepb.LeaseInternalRequest)
}

void LeaseInternalRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LeaseInternalRequest_lease_2eproto.base);
  leasetimetoliverequest_ = nullptr;
}

LeaseInternalRequest::~LeaseInternalRequest() {
  // @@protoc_insertion_point(destructor:leasepb.LeaseInternalRequest)
  SharedDtor();
}

void LeaseInternalRequest::SharedDtor() {
  if (this != internal_default_instance()) delete leasetimetoliverequest_;
}

void LeaseInternalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseInternalRequest& LeaseInternalRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LeaseInternalRequest_lease_2eproto.base);
  return *internal_default_instance();
}


void LeaseInternalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:leasepb.LeaseInternalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && leasetimetoliverequest_ != nullptr) {
    delete leasetimetoliverequest_;
  }
  leasetimetoliverequest_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LeaseInternalRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LeaseInternalRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.LeaseTimeToLiveRequest LeaseTimeToLiveRequest = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::etcdserverpb::LeaseTimeToLiveRequest::_InternalParse;
        object = msg->mutable_leasetimetoliverequest();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LeaseInternalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:leasepb.LeaseInternalRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.LeaseTimeToLiveRequest LeaseTimeToLiveRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leasetimetoliverequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:leasepb.LeaseInternalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:leasepb.LeaseInternalRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LeaseInternalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:leasepb.LeaseInternalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.LeaseTimeToLiveRequest LeaseTimeToLiveRequest = 1;
  if (this->has_leasetimetoliverequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::leasetimetoliverequest(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:leasepb.LeaseInternalRequest)
}

::google::protobuf::uint8* LeaseInternalRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:leasepb.LeaseInternalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.LeaseTimeToLiveRequest LeaseTimeToLiveRequest = 1;
  if (this->has_leasetimetoliverequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::leasetimetoliverequest(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:leasepb.LeaseInternalRequest)
  return target;
}

size_t LeaseInternalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:leasepb.LeaseInternalRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.LeaseTimeToLiveRequest LeaseTimeToLiveRequest = 1;
  if (this->has_leasetimetoliverequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leasetimetoliverequest_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseInternalRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:leasepb.LeaseInternalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseInternalRequest* source =
      ::google::protobuf::DynamicCastToGenerated<LeaseInternalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:leasepb.LeaseInternalRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:leasepb.LeaseInternalRequest)
    MergeFrom(*source);
  }
}

void LeaseInternalRequest::MergeFrom(const LeaseInternalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:leasepb.LeaseInternalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leasetimetoliverequest()) {
    mutable_leasetimetoliverequest()->::etcdserverpb::LeaseTimeToLiveRequest::MergeFrom(from.leasetimetoliverequest());
  }
}

void LeaseInternalRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:leasepb.LeaseInternalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseInternalRequest::CopyFrom(const LeaseInternalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:leasepb.LeaseInternalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseInternalRequest::IsInitialized() const {
  return true;
}

void LeaseInternalRequest::Swap(LeaseInternalRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaseInternalRequest::InternalSwap(LeaseInternalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(leasetimetoliverequest_, other->leasetimetoliverequest_);
}

::google::protobuf::Metadata LeaseInternalRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lease_2eproto);
  return ::file_level_metadata_lease_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LeaseInternalResponse::InitAsDefaultInstance() {
  ::leasepb::_LeaseInternalResponse_default_instance_._instance.get_mutable()->leasetimetoliveresponse_ = const_cast< ::etcdserverpb::LeaseTimeToLiveResponse*>(
      ::etcdserverpb::LeaseTimeToLiveResponse::internal_default_instance());
}
class LeaseInternalResponse::HasBitSetters {
 public:
  static const ::etcdserverpb::LeaseTimeToLiveResponse& leasetimetoliveresponse(const LeaseInternalResponse* msg);
};

const ::etcdserverpb::LeaseTimeToLiveResponse&
LeaseInternalResponse::HasBitSetters::leasetimetoliveresponse(const LeaseInternalResponse* msg) {
  return *msg->leasetimetoliveresponse_;
}
void LeaseInternalResponse::clear_leasetimetoliveresponse() {
  if (GetArenaNoVirtual() == nullptr && leasetimetoliveresponse_ != nullptr) {
    delete leasetimetoliveresponse_;
  }
  leasetimetoliveresponse_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaseInternalResponse::kLeaseTimeToLiveResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaseInternalResponse::LeaseInternalResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:leasepb.LeaseInternalResponse)
}
LeaseInternalResponse::LeaseInternalResponse(const LeaseInternalResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leasetimetoliveresponse()) {
    leasetimetoliveresponse_ = new ::etcdserverpb::LeaseTimeToLiveResponse(*from.leasetimetoliveresponse_);
  } else {
    leasetimetoliveresponse_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:leasepb.LeaseInternalResponse)
}

void LeaseInternalResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LeaseInternalResponse_lease_2eproto.base);
  leasetimetoliveresponse_ = nullptr;
}

LeaseInternalResponse::~LeaseInternalResponse() {
  // @@protoc_insertion_point(destructor:leasepb.LeaseInternalResponse)
  SharedDtor();
}

void LeaseInternalResponse::SharedDtor() {
  if (this != internal_default_instance()) delete leasetimetoliveresponse_;
}

void LeaseInternalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseInternalResponse& LeaseInternalResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LeaseInternalResponse_lease_2eproto.base);
  return *internal_default_instance();
}


void LeaseInternalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:leasepb.LeaseInternalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && leasetimetoliveresponse_ != nullptr) {
    delete leasetimetoliveresponse_;
  }
  leasetimetoliveresponse_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LeaseInternalResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LeaseInternalResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.LeaseTimeToLiveResponse LeaseTimeToLiveResponse = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::etcdserverpb::LeaseTimeToLiveResponse::_InternalParse;
        object = msg->mutable_leasetimetoliveresponse();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LeaseInternalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:leasepb.LeaseInternalResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.LeaseTimeToLiveResponse LeaseTimeToLiveResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leasetimetoliveresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:leasepb.LeaseInternalResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:leasepb.LeaseInternalResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LeaseInternalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:leasepb.LeaseInternalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.LeaseTimeToLiveResponse LeaseTimeToLiveResponse = 1;
  if (this->has_leasetimetoliveresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::leasetimetoliveresponse(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:leasepb.LeaseInternalResponse)
}

::google::protobuf::uint8* LeaseInternalResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:leasepb.LeaseInternalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.LeaseTimeToLiveResponse LeaseTimeToLiveResponse = 1;
  if (this->has_leasetimetoliveresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::leasetimetoliveresponse(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:leasepb.LeaseInternalResponse)
  return target;
}

size_t LeaseInternalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:leasepb.LeaseInternalResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.LeaseTimeToLiveResponse LeaseTimeToLiveResponse = 1;
  if (this->has_leasetimetoliveresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leasetimetoliveresponse_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseInternalResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:leasepb.LeaseInternalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseInternalResponse* source =
      ::google::protobuf::DynamicCastToGenerated<LeaseInternalResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:leasepb.LeaseInternalResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:leasepb.LeaseInternalResponse)
    MergeFrom(*source);
  }
}

void LeaseInternalResponse::MergeFrom(const LeaseInternalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:leasepb.LeaseInternalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leasetimetoliveresponse()) {
    mutable_leasetimetoliveresponse()->::etcdserverpb::LeaseTimeToLiveResponse::MergeFrom(from.leasetimetoliveresponse());
  }
}

void LeaseInternalResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:leasepb.LeaseInternalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseInternalResponse::CopyFrom(const LeaseInternalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:leasepb.LeaseInternalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseInternalResponse::IsInitialized() const {
  return true;
}

void LeaseInternalResponse::Swap(LeaseInternalResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaseInternalResponse::InternalSwap(LeaseInternalResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(leasetimetoliveresponse_, other->leasetimetoliveresponse_);
}

::google::protobuf::Metadata LeaseInternalResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lease_2eproto);
  return ::file_level_metadata_lease_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace leasepb
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::leasepb::Lease* Arena::CreateMaybeMessage< ::leasepb::Lease >(Arena* arena) {
  return Arena::CreateInternal< ::leasepb::Lease >(arena);
}
template<> PROTOBUF_NOINLINE ::leasepb::LeaseInternalRequest* Arena::CreateMaybeMessage< ::leasepb::LeaseInternalRequest >(Arena* arena) {
  return Arena::CreateInternal< ::leasepb::LeaseInternalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::leasepb::LeaseInternalResponse* Arena::CreateMaybeMessage< ::leasepb::LeaseInternalResponse >(Arena* arena) {
  return Arena::CreateInternal< ::leasepb::LeaseInternalResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
