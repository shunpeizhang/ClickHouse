// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: base.capnp

#include "base.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<34> b_e07fb26a3a389fde = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    222, 159,  56,  58, 106, 178, 127, 224,
     11,   0,   0,   0,   1,   0,   1,   0,
     44, 162,  56, 228, 246,  26,  74, 131,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,  97, 115, 101,  46,  99,  97, 112,
    110, 112,  58,  82, 101, 113, 117, 101,
    115, 116,  72, 101,  97, 100, 101, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    115, 101, 115, 115, 105, 111, 110,  73,
     68,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e07fb26a3a389fde = b_e07fb26a3a389fde.words;
#if !CAPNP_LITE
static const uint16_t m_e07fb26a3a389fde[] = {0};
static const uint16_t i_e07fb26a3a389fde[] = {0};
const ::capnp::_::RawSchema s_e07fb26a3a389fde = {
  0xe07fb26a3a389fde, b_e07fb26a3a389fde.words, 34, nullptr, m_e07fb26a3a389fde,
  0, 1, i_e07fb26a3a389fde, nullptr, nullptr, { &s_e07fb26a3a389fde, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_fb18ecca068b4374 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    116,  67, 139,   6, 202, 236,  24, 251,
     11,   0,   0,   0,   1,   0,   1,   0,
     44, 162,  56, 228, 246,  26,  74, 131,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,  97, 115, 101,  46,  99,  97, 112,
    110, 112,  58,  82, 101, 115, 112, 111,
    110, 115, 101,  72, 101,  97, 100, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    115, 101, 115, 115, 105, 111, 110,  73,
     68,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fb18ecca068b4374 = b_fb18ecca068b4374.words;
#if !CAPNP_LITE
static const uint16_t m_fb18ecca068b4374[] = {0};
static const uint16_t i_fb18ecca068b4374[] = {0};
const ::capnp::_::RawSchema s_fb18ecca068b4374 = {
  0xfb18ecca068b4374, b_fb18ecca068b4374.words, 34, nullptr, m_fb18ecca068b4374,
  0, 1, i_fb18ecca068b4374, nullptr, nullptr, { &s_fb18ecca068b4374, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<53> b_880d06a6d01e0e5d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     93,  14,  30, 208, 166,   6,  13, 136,
     11,   0,   0,   0,   1,   0,   1,   0,
     44, 162,  56, 228, 246,  26,  74, 131,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,  97, 115, 101,  46,  99,  97, 112,
    110, 112,  58,  72, 101,  97, 116,  98,
    101,  97, 116,  82, 101, 113, 117, 101,
    115, 116,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     58, 111, 219, 101, 106,  74, 229, 185,
      1,   0,   0,   0,  82,   0,   0,   0,
    109, 101, 115, 115,  97, 103, 101,  73,
     68,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    104, 101,  97, 100, 101, 114,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    222, 159,  56,  58, 106, 178, 127, 224,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 109, 101, 115, 116,  97, 109,
    112,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_880d06a6d01e0e5d = b_880d06a6d01e0e5d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_880d06a6d01e0e5d[] = {
  &s_e07fb26a3a389fde,
};
static const uint16_t m_880d06a6d01e0e5d[] = {0, 1};
static const uint16_t i_880d06a6d01e0e5d[] = {0, 1};
const ::capnp::_::RawSchema s_880d06a6d01e0e5d = {
  0x880d06a6d01e0e5d, b_880d06a6d01e0e5d.words, 53, d_880d06a6d01e0e5d, m_880d06a6d01e0e5d,
  1, 2, i_880d06a6d01e0e5d, nullptr, nullptr, { &s_880d06a6d01e0e5d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<25> b_b9e54a6a65db6f3a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     58, 111, 219, 101, 106,  74, 229, 185,
     27,   0,   0,   0,   4,   0,   0,   0,
     93,  14,  30, 208, 166,   6,  13, 136,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     32,   0,   0,   0,   3,   0,   1,   0,
     44,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,  97, 115, 101,  46,  99,  97, 112,
    110, 112,  58,  72, 101,  97, 116,  98,
    101,  97, 116,  82, 101, 113, 117, 101,
    115, 116,  46, 109, 101, 115, 115,  97,
    103, 101,  73,  68,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   0,  15,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9e54a6a65db6f3a = b_b9e54a6a65db6f3a.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b9e54a6a65db6f3a = {
  0xb9e54a6a65db6f3a, b_b9e54a6a65db6f3a.words, 25, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b9e54a6a65db6f3a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_cb9ce44c2e18d1e6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    230, 209,  24,  46,  76, 228, 156, 203,
     11,   0,   0,   0,   1,   0,   0,   0,
     44, 162,  56, 228, 246,  26,  74, 131,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,  97, 115, 101,  46,  99,  97, 112,
    110, 112,  58,  72, 101,  97, 116,  98,
    101,  97, 116,  82, 101, 115, 112, 111,
    110, 115, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104, 101,  97, 100, 101, 114,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    116,  67, 139,   6, 202, 236,  24, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cb9ce44c2e18d1e6 = b_cb9ce44c2e18d1e6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cb9ce44c2e18d1e6[] = {
  &s_fb18ecca068b4374,
};
static const uint16_t m_cb9ce44c2e18d1e6[] = {0};
static const uint16_t i_cb9ce44c2e18d1e6[] = {0};
const ::capnp::_::RawSchema s_cb9ce44c2e18d1e6 = {
  0xcb9ce44c2e18d1e6, b_cb9ce44c2e18d1e6.words, 33, d_cb9ce44c2e18d1e6, m_cb9ce44c2e18d1e6,
  1, 1, i_cb9ce44c2e18d1e6, nullptr, nullptr, { &s_cb9ce44c2e18d1e6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace ultradb {
namespace protocol {
namespace base {

// RequestHeader
constexpr uint16_t RequestHeader::_capnpPrivate::dataWordSize;
constexpr uint16_t RequestHeader::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RequestHeader::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RequestHeader::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ResponseHeader
constexpr uint16_t ResponseHeader::_capnpPrivate::dataWordSize;
constexpr uint16_t ResponseHeader::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ResponseHeader::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ResponseHeader::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// HeatbeatRequest
constexpr uint16_t HeatbeatRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t HeatbeatRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HeatbeatRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HeatbeatRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#ifndef _MSC_VER
constexpr  ::int32_t HeatbeatRequest::MESSAGE_I_D;
#endif
// HeatbeatResponse
constexpr uint16_t HeatbeatResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t HeatbeatResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HeatbeatResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HeatbeatResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

